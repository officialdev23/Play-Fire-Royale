Shader "Legacy Shaders/Specular"
{
  Properties
  {
    _Color ("Main Color", Color) = (1,1,1,1)
    _SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
    [PowerSlider(5.0)] _Shininess ("Shininess", Range(0.01, 1)) = 0.078125
    _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
  }
  SubShader
  {
    Tags
    { 
      "RenderType" = "Opaque"
    }
    LOD 300
    Pass // ind: 1, name: FORWARD
    {
      Name "FORWARD"
      Tags
      { 
        "LIGHTMODE" = "FORWARDBASE"
        "RenderType" = "Opaque"
        "SHADOWSUPPORT" = "true"
      }
      LOD 300
      GpuProgramID 5937
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_6;
            normal_6 = tmpvar_5;
            mediump vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = normal_6;
            mediump vec3 res_8;
            mediump vec3 x_9;
            x_9.x = dot (unity_SHAr, tmpvar_7);
            x_9.y = dot (unity_SHAg, tmpvar_7);
            x_9.z = dot (unity_SHAb, tmpvar_7);
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
              ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
            )));
            mediump vec3 tmpvar_12;
            tmpvar_12 = max (((1.055 * 
              pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_8 = tmpvar_12;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_6;
            normal_6 = tmpvar_5;
            mediump vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = normal_6;
            mediump vec3 res_8;
            mediump vec3 x_9;
            x_9.x = dot (unity_SHAr, tmpvar_7);
            x_9.y = dot (unity_SHAg, tmpvar_7);
            x_9.z = dot (unity_SHAb, tmpvar_7);
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
              ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
            )));
            mediump vec3 tmpvar_12;
            tmpvar_12 = max (((1.055 * 
              pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_8 = tmpvar_12;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_6;
            normal_6 = tmpvar_5;
            mediump vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = normal_6;
            mediump vec3 res_8;
            mediump vec3 x_9;
            x_9.x = dot (unity_SHAr, tmpvar_7);
            x_9.y = dot (unity_SHAg, tmpvar_7);
            x_9.z = dot (unity_SHAb, tmpvar_7);
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
              ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
            )));
            mediump vec3 tmpvar_12;
            tmpvar_12 = max (((1.055 * 
              pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_8 = tmpvar_12;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_5;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_5;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_5;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_5;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec4 tmpvar_24;
            tmpvar_24.w = 1.0;
            tmpvar_24.xyz = normal_22;
            mediump vec3 res_25;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_24);
            x_26.y = dot (unity_SHAg, tmpvar_24);
            x_26.z = dot (unity_SHAb, tmpvar_24);
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_25 = tmpvar_29;
            ambient_23 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec4 tmpvar_24;
            tmpvar_24.w = 1.0;
            tmpvar_24.xyz = normal_22;
            mediump vec3 res_25;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_24);
            x_26.y = dot (unity_SHAg, tmpvar_24);
            x_26.z = dot (unity_SHAb, tmpvar_24);
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_25 = tmpvar_29;
            ambient_23 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec3 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec4 tmpvar_24;
            tmpvar_24.w = 1.0;
            tmpvar_24.xyz = normal_22;
            mediump vec3 res_25;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_24);
            x_26.y = dot (unity_SHAg, tmpvar_24);
            x_26.z = dot (unity_SHAb, tmpvar_24);
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_22.xyzz * normal_22.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            res_25 = (x_26 + (x1_27 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (res_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_25 = tmpvar_29;
            ambient_23 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_29));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            c_3.xyz = c_11.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            c_3.xyz = c_13.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            c_3.xyz = c_19.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            lowp vec4 c_25;
            highp float nh_26;
            lowp float diff_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_27 = tmpvar_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_26 = tmpvar_29;
            mediump float y_30;
            y_30 = (_Shininess * 128.0);
            highp float tmpvar_31;
            tmpvar_31 = (pow (nh_26, y_30) * tmpvar_11.w);
            c_25.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_27)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_31));
            c_25.w = (tmpvar_11.w * _Color.w);
            c_24.w = c_25.w;
            c_24.xyz = c_25.xyz;
            c_4.xyz = c_24.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5.xyz;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec3 x1_24;
            mediump vec4 tmpvar_25;
            tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
            x1_24.x = dot (unity_SHBr, tmpvar_25);
            x1_24.y = dot (unity_SHBg, tmpvar_25);
            x1_24.z = dot (unity_SHBb, tmpvar_25);
            ambient_23 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5.xyz;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec3 x1_24;
            mediump vec4 tmpvar_25;
            tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
            x1_24.x = dot (unity_SHBr, tmpvar_25);
            x1_24.y = dot (unity_SHBg, tmpvar_25);
            x1_24.z = dot (unity_SHBb, tmpvar_25);
            ambient_23 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_1.xyz = tmpvar_5.xyz;
            highp vec3 lightColor0_8;
            lightColor0_8 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_9;
            lightColor1_9 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_10;
            lightColor2_10 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_11;
            lightColor3_11 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_12;
            lightAttenSq_12 = unity_4LightAtten0;
            highp vec3 col_13;
            highp vec4 ndotl_14;
            highp vec4 lengthSq_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = (unity_4LightPosX0 - tmpvar_5.x);
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosY0 - tmpvar_5.y);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosZ0 - tmpvar_5.z);
            lengthSq_15 = (tmpvar_16 * tmpvar_16);
            lengthSq_15 = (lengthSq_15 + (tmpvar_17 * tmpvar_17));
            lengthSq_15 = (lengthSq_15 + (tmpvar_18 * tmpvar_18));
            highp vec4 tmpvar_19;
            tmpvar_19 = max (lengthSq_15, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_15 = tmpvar_19;
            ndotl_14 = (tmpvar_16 * tmpvar_7.x);
            ndotl_14 = (ndotl_14 + (tmpvar_17 * tmpvar_7.y));
            ndotl_14 = (ndotl_14 + (tmpvar_18 * tmpvar_7.z));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_14 * inversesqrt(tmpvar_19)));
            ndotl_14 = tmpvar_20;
            highp vec4 tmpvar_21;
            tmpvar_21 = (tmpvar_20 * (1.0/((1.0 + 
              (tmpvar_19 * lightAttenSq_12)
            ))));
            col_13 = (lightColor0_8 * tmpvar_21.x);
            col_13 = (col_13 + (lightColor1_9 * tmpvar_21.y));
            col_13 = (col_13 + (lightColor2_10 * tmpvar_21.z));
            col_13 = (col_13 + (lightColor3_11 * tmpvar_21.w));
            tmpvar_2 = col_13;
            mediump vec3 normal_22;
            normal_22 = tmpvar_7;
            mediump vec3 ambient_23;
            mediump vec3 x1_24;
            mediump vec4 tmpvar_25;
            tmpvar_25 = (normal_22.xyzz * normal_22.yzzx);
            x1_24.x = dot (unity_SHBr, tmpvar_25);
            x1_24.y = dot (unity_SHBg, tmpvar_25);
            x1_24.z = dot (unity_SHBb, tmpvar_25);
            ambient_23 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_24 + (unity_SHC.xyz * 
              ((normal_22.x * normal_22.x) - (normal_22.y * normal_22.y))
            )));
            tmpvar_2 = ambient_23;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_23;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            c_4.xyz = c_29.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            c_4.xyz = c_27.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_5.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_5);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            c_4.xyz = c_33.xyz;
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = normal_7;
            mediump vec3 res_9;
            mediump vec3 x_10;
            x_10.x = dot (unity_SHAr, tmpvar_8);
            x_10.y = dot (unity_SHAg, tmpvar_8);
            x_10.z = dot (unity_SHAb, tmpvar_8);
            mediump vec3 x1_11;
            mediump vec4 tmpvar_12;
            tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
            x1_11.x = dot (unity_SHBr, tmpvar_12);
            x1_11.y = dot (unity_SHBg, tmpvar_12);
            x1_11.z = dot (unity_SHBb, tmpvar_12);
            res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
              ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
            )));
            mediump vec3 tmpvar_13;
            tmpvar_13 = max (((1.055 * 
              pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_9 = tmpvar_13;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = normal_7;
            mediump vec3 res_9;
            mediump vec3 x_10;
            x_10.x = dot (unity_SHAr, tmpvar_8);
            x_10.y = dot (unity_SHAg, tmpvar_8);
            x_10.z = dot (unity_SHAb, tmpvar_8);
            mediump vec3 x1_11;
            mediump vec4 tmpvar_12;
            tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
            x1_11.x = dot (unity_SHBr, tmpvar_12);
            x1_11.y = dot (unity_SHBg, tmpvar_12);
            x1_11.z = dot (unity_SHBb, tmpvar_12);
            res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
              ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
            )));
            mediump vec3 tmpvar_13;
            tmpvar_13 = max (((1.055 * 
              pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_9 = tmpvar_13;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = normal_7;
            mediump vec3 res_9;
            mediump vec3 x_10;
            x_10.x = dot (unity_SHAr, tmpvar_8);
            x_10.y = dot (unity_SHAg, tmpvar_8);
            x_10.z = dot (unity_SHAb, tmpvar_8);
            mediump vec3 x1_11;
            mediump vec4 tmpvar_12;
            tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
            x1_11.x = dot (unity_SHBr, tmpvar_12);
            x1_11.y = dot (unity_SHBg, tmpvar_12);
            x1_11.z = dot (unity_SHBb, tmpvar_12);
            res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
              ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
            )));
            mediump vec3 tmpvar_13;
            tmpvar_13 = max (((1.055 * 
              pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_9 = tmpvar_13;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            highp vec4 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_7.xyz;
            mediump vec3 normal_8;
            normal_8 = tmpvar_6;
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
              (normal_8.x * normal_8.x)
             - 
              (normal_8.y * normal_8.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_7);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            highp vec4 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_7.xyz;
            mediump vec3 normal_8;
            normal_8 = tmpvar_6;
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
              (normal_8.x * normal_8.x)
             - 
              (normal_8.y * normal_8.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_7);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            highp vec4 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_7.xyz;
            mediump vec3 normal_8;
            normal_8 = tmpvar_6;
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
              (normal_8.x * normal_8.x)
             - 
              (normal_8.y * normal_8.y)
            )));
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_7);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_10.xyz, vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normal_23;
            mediump vec3 res_26;
            mediump vec3 x_27;
            x_27.x = dot (unity_SHAr, tmpvar_25);
            x_27.y = dot (unity_SHAg, tmpvar_25);
            x_27.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 x1_28;
            mediump vec4 tmpvar_29;
            tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
            x1_28.x = dot (unity_SHBr, tmpvar_29);
            x1_28.y = dot (unity_SHBg, tmpvar_29);
            x1_28.z = dot (unity_SHBb, tmpvar_29);
            res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            mediump vec3 tmpvar_30;
            tmpvar_30 = max (((1.055 * 
              pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_26 = tmpvar_30;
            ambient_24 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normal_23;
            mediump vec3 res_26;
            mediump vec3 x_27;
            x_27.x = dot (unity_SHAr, tmpvar_25);
            x_27.y = dot (unity_SHAg, tmpvar_25);
            x_27.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 x1_28;
            mediump vec4 tmpvar_29;
            tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
            x1_28.x = dot (unity_SHBr, tmpvar_29);
            x1_28.y = dot (unity_SHBg, tmpvar_29);
            x1_28.z = dot (unity_SHBb, tmpvar_29);
            res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            mediump vec3 tmpvar_30;
            tmpvar_30 = max (((1.055 * 
              pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_26 = tmpvar_30;
            ambient_24 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normal_23;
            mediump vec3 res_26;
            mediump vec3 x_27;
            x_27.x = dot (unity_SHAr, tmpvar_25);
            x_27.y = dot (unity_SHAg, tmpvar_25);
            x_27.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 x1_28;
            mediump vec4 tmpvar_29;
            tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
            x1_28.x = dot (unity_SHBr, tmpvar_29);
            x1_28.y = dot (unity_SHBg, tmpvar_29);
            x1_28.z = dot (unity_SHBb, tmpvar_29);
            res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            mediump vec3 tmpvar_30;
            tmpvar_30 = max (((1.055 * 
              pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_26 = tmpvar_30;
            ambient_24 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 viewDir_10;
            viewDir_10 = worldViewDir_6;
            lowp vec4 c_11;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_10)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_4 * tmpvar_1) * diff_14) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            c_11.w = c_12.w;
            c_11.xyz = (c_12.xyz + (tmpvar_4 * xlv_TEXCOORD3));
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_11.xyz, vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_10 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz), unity_DynamicLightmap_HDR.yyy);
            mediump vec3 viewDir_12;
            viewDir_12 = worldViewDir_6;
            lowp vec4 c_13;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_12)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_9.w);
            c_14.xyz = (((tmpvar_4 * tmpvar_1) * diff_16) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_9.w * _Color.w);
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_4 * tmpvar_10));
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_13.xyz, vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_14 = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_14);
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat12 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.xyz = (unity_ObjectToWorld * _glesVertex).xyz;
            tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_4 = (tmpvar_9.xyz * _Color.xyz);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            mediump vec3 normalWorld_10;
            normalWorld_10 = tmpvar_5;
            mediump vec4 realtimeDirTex_11;
            mediump vec3 tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_14;
            tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_11 = tmpvar_14;
            lowp vec4 dirTex_15;
            dirTex_15 = realtimeDirTex_11;
            lowp vec3 y_16;
            y_16 = (dirTex_15.xyz - 0.5);
            lowp float tmpvar_17;
            tmpvar_17 = max (0.0001, dirTex_15.w);
            tmpvar_12 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_10, y_16)
             + 0.5)) / tmpvar_17);
            mediump vec3 viewDir_18;
            viewDir_18 = worldViewDir_6;
            lowp vec4 c_19;
            lowp vec4 c_20;
            highp float nh_21;
            lowp float diff_22;
            mediump float tmpvar_23;
            tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_22 = tmpvar_23;
            mediump float tmpvar_24;
            tmpvar_24 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_18)
            )));
            nh_21 = tmpvar_24;
            mediump float y_25;
            y_25 = (_Shininess * 128.0);
            highp float tmpvar_26;
            tmpvar_26 = (pow (nh_21, y_25) * tmpvar_9.w);
            c_20.xyz = (((tmpvar_4 * tmpvar_1) * diff_22) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_26));
            c_20.w = (tmpvar_9.w * _Color.w);
            c_19.w = c_20.w;
            c_19.xyz = (c_20.xyz + (tmpvar_4 * tmpvar_12));
            highp float tmpvar_27;
            tmpvar_27 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_3.xyz = mix (unity_FogColor.xyz, c_19.xyz, vec3(tmpvar_27));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_2.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_16 = u_xlat16_16 + 0.5;
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.xxx;
              u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat3.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_15 = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
              u_xlat16_15 = exp2(u_xlat16_15);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_15 = u_xlat16_15 * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_4.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            mediump float realtimeShadowAttenuation_12;
            highp vec4 v_13;
            v_13.x = unity_MatrixV[0].z;
            v_13.y = unity_MatrixV[1].z;
            v_13.z = unity_MatrixV[2].z;
            v_13.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_14;
            tmpvar_14 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_15;
            highp float tmpvar_16;
            tmpvar_16 = clamp (((
              mix (dot (tmpvar_10, v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_15 = tmpvar_16;
            lowp float tmpvar_17;
            highp float lightShadowDataX_18;
            mediump float tmpvar_19;
            tmpvar_19 = _LightShadowData.x;
            lightShadowDataX_18 = tmpvar_19;
            highp float tmpvar_20;
            tmpvar_20 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_18);
            tmpvar_17 = tmpvar_20;
            realtimeShadowAttenuation_12 = tmpvar_17;
            mediump float tmpvar_21;
            tmpvar_21 = mix (realtimeShadowAttenuation_12, 1.0, tmpvar_15);
            atten_5 = tmpvar_21;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            tmpvar_2 = tmpvar_22;
            mediump vec3 viewDir_23;
            viewDir_23 = tmpvar_9;
            lowp vec4 c_24;
            highp float nh_25;
            lowp float diff_26;
            mediump float tmpvar_27;
            tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_26 = tmpvar_27;
            mediump float tmpvar_28;
            tmpvar_28 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_23)
            )));
            nh_25 = tmpvar_28;
            mediump float y_29;
            y_29 = (_Shininess * 128.0);
            highp float tmpvar_30;
            tmpvar_30 = (pow (nh_25, y_29) * tmpvar_11.w);
            c_24.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_22 * diff_26)) + ((tmpvar_22 * _SpecColor.xyz) * tmpvar_30));
            c_24.w = (tmpvar_11.w * _Color.w);
            highp float tmpvar_31;
            tmpvar_31 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_24.xyz, vec3(tmpvar_31));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6.xyz;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6.xyz;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = _glesVertex.xyz;
            tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            tmpvar_1.xyz = tmpvar_6.xyz;
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            tmpvar_1.w = ((tmpvar_4.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_4;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = ambient_24;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying mediump vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec3 tmpvar_24;
            tmpvar_24 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_25;
            tmpvar_25.w = 1.0;
            tmpvar_25.xyz = normalWorld_23;
            mediump vec3 x_26;
            x_26.x = dot (unity_SHAr, tmpvar_25);
            x_26.y = dot (unity_SHAg, tmpvar_25);
            x_26.z = dot (unity_SHAb, tmpvar_25);
            mediump vec3 tmpvar_27;
            tmpvar_27 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_26)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_24;
            mediump vec3 viewDir_28;
            viewDir_28 = tmpvar_9;
            lowp vec4 c_29;
            lowp vec4 c_30;
            highp float nh_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_32 = tmpvar_33;
            mediump float tmpvar_34;
            tmpvar_34 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_28)
            )));
            nh_31 = tmpvar_34;
            mediump float y_35;
            y_35 = (_Shininess * 128.0);
            highp float tmpvar_36;
            tmpvar_36 = (pow (nh_31, y_35) * tmpvar_12.w);
            c_30.xyz = (((tmpvar_11 * tmpvar_24) * diff_32) + ((tmpvar_24 * _SpecColor.xyz) * tmpvar_36));
            c_30.w = (tmpvar_12.w * _Color.w);
            c_29.w = c_30.w;
            c_29.xyz = (c_30.xyz + (tmpvar_11 * tmpvar_27));
            highp float tmpvar_37;
            tmpvar_37 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_29.xyz, vec3(tmpvar_37));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec3 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat1.xyz = vs_TEXCOORD1.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_2.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 tmpvar_23;
            mediump vec3 tmpvar_24;
            tmpvar_23 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_25;
            tmpvar_25 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            tmpvar_24 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz), unity_DynamicLightmap_HDR.yyy);
            tmpvar_2 = tmpvar_23;
            mediump vec3 viewDir_26;
            viewDir_26 = tmpvar_9;
            lowp vec4 c_27;
            lowp vec4 c_28;
            highp float nh_29;
            lowp float diff_30;
            mediump float tmpvar_31;
            tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_30 = tmpvar_31;
            mediump float tmpvar_32;
            tmpvar_32 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_26)
            )));
            nh_29 = tmpvar_32;
            mediump float y_33;
            y_33 = (_Shininess * 128.0);
            highp float tmpvar_34;
            tmpvar_34 = (pow (nh_29, y_33) * tmpvar_12.w);
            c_28.xyz = (((tmpvar_11 * tmpvar_23) * diff_30) + ((tmpvar_23 * _SpecColor.xyz) * tmpvar_34));
            c_28.w = (tmpvar_12.w * _Color.w);
            c_27.w = c_28.w;
            c_27.xyz = (c_28.xyz + (tmpvar_11 * tmpvar_24));
            highp float tmpvar_35;
            tmpvar_35 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_27.xyz, vec3(tmpvar_35));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          mediump float u_xlat16_6;
          float u_xlat15;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_6 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_6 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat5.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.x = log2(u_xlat16_16);
              u_xlat16_16 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_16;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_16 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_16 = max(u_xlat16_16, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_16) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat15 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * _glesVertex);
            tmpvar_1.xyz = tmpvar_6.xyz;
            tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.w = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD5 = (unity_WorldToShadow[0] * tmpvar_6);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD5;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp vec4 c_4;
            lowp float atten_5;
            lowp vec3 tmpvar_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            highp vec3 tmpvar_9;
            highp vec3 tmpvar_10;
            tmpvar_10 = (_WorldSpaceCameraPos - xlv_TEXCOORD2.xyz);
            tmpvar_9 = normalize(tmpvar_10);
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_11 = (tmpvar_12.xyz * _Color.xyz);
            mediump float realtimeShadowAttenuation_13;
            highp vec4 v_14;
            v_14.x = unity_MatrixV[0].z;
            v_14.y = unity_MatrixV[1].z;
            v_14.z = unity_MatrixV[2].z;
            v_14.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_15;
            tmpvar_15 = (xlv_TEXCOORD2.xyz - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_16;
            highp float tmpvar_17;
            tmpvar_17 = clamp (((
              mix (dot (tmpvar_10, v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_16 = tmpvar_17;
            lowp float tmpvar_18;
            highp float lightShadowDataX_19;
            mediump float tmpvar_20;
            tmpvar_20 = _LightShadowData.x;
            lightShadowDataX_19 = tmpvar_20;
            highp float tmpvar_21;
            tmpvar_21 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD5.xy).x > xlv_TEXCOORD5.z)), lightShadowDataX_19);
            tmpvar_18 = tmpvar_21;
            realtimeShadowAttenuation_13 = tmpvar_18;
            mediump float tmpvar_22;
            tmpvar_22 = mix (realtimeShadowAttenuation_13, 1.0, tmpvar_16);
            atten_5 = tmpvar_22;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_7;
            tmpvar_1 = atten_5;
            mediump vec3 normalWorld_23;
            normalWorld_23 = tmpvar_6;
            mediump vec4 realtimeDirTex_24;
            mediump vec3 tmpvar_25;
            mediump vec3 tmpvar_26;
            tmpvar_25 = (tmpvar_2 * tmpvar_1);
            lowp vec4 tmpvar_27;
            tmpvar_27 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
            lowp vec4 tmpvar_28;
            tmpvar_28 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD6.zw);
            realtimeDirTex_24 = tmpvar_28;
            lowp vec4 dirTex_29;
            dirTex_29 = realtimeDirTex_24;
            lowp vec3 y_30;
            y_30 = (dirTex_29.xyz - 0.5);
            lowp float tmpvar_31;
            tmpvar_31 = max (0.0001, dirTex_29.w);
            tmpvar_26 = ((pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
            , unity_DynamicLightmap_HDR.yyy) * (
              dot (normalWorld_23, y_30)
             + 0.5)) / tmpvar_31);
            tmpvar_2 = tmpvar_25;
            mediump vec3 viewDir_32;
            viewDir_32 = tmpvar_9;
            lowp vec4 c_33;
            lowp vec4 c_34;
            highp float nh_35;
            lowp float diff_36;
            mediump float tmpvar_37;
            tmpvar_37 = max (0.0, dot (tmpvar_6, tmpvar_3));
            diff_36 = tmpvar_37;
            mediump float tmpvar_38;
            tmpvar_38 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_3 + viewDir_32)
            )));
            nh_35 = tmpvar_38;
            mediump float y_39;
            y_39 = (_Shininess * 128.0);
            highp float tmpvar_40;
            tmpvar_40 = (pow (nh_35, y_39) * tmpvar_12.w);
            c_34.xyz = (((tmpvar_11 * tmpvar_25) * diff_36) + ((tmpvar_25 * _SpecColor.xyz) * tmpvar_40));
            c_34.w = (tmpvar_12.w * _Color.w);
            c_33.w = c_34.w;
            c_33.xyz = (c_34.xyz + (tmpvar_11 * tmpvar_26));
            highp float tmpvar_41;
            tmpvar_41 = clamp (xlv_TEXCOORD2.w, 0.0, 1.0);
            c_4.xyz = mix (unity_FogColor.xyz, c_33.xyz, vec3(tmpvar_41));
            c_4.w = 1.0;
            gl_FragData[0] = c_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD5;
          out highp vec4 vs_TEXCOORD6;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD6.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD4;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD6;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_5;
          vec3 u_xlat6;
          mediump float u_xlat16_7;
          float u_xlat18;
          mediump float u_xlat16_18;
          mediump float u_xlat16_19;
          mediump float u_xlat16_21;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
              u_xlat10_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_1.x = u_xlat10_0 * u_xlat16_1.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
              u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
              u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
              u_xlat0.x = inversesqrt(u_xlat0.x);
              u_xlat16_4.xyz = u_xlat6.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
              u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = inversesqrt(u_xlat16_19);
              u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.x = log2(u_xlat16_19);
              u_xlat16_19 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_19;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
              u_xlat16_19 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_19 = max(u_xlat16_19, 0.0);
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat16_0.xyz;
              u_xlat10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
              u_xlat16_3.x = u_xlat10_1.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
              u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
              u_xlat16_3.xyz = u_xlat16_3.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
              u_xlat10_1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
              u_xlat16_5.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_18 = max(u_xlat10_1.w, 9.99999975e-05);
              u_xlat16_21 = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
              u_xlat16_21 = u_xlat16_21 + 0.5;
              u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_3.xyz / vec3(u_xlat16_18);
              u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
              u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
              u_xlat18 = vs_TEXCOORD4;
          #ifdef UNITY_ADRENO_ES3
              u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
          #else
              u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
          #endif
              u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_0.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 2, name: FORWARD
    {
      Name "FORWARD"
      Tags
      { 
        "LIGHTMODE" = "FORWARDADD"
        "RenderType" = "Opaque"
      }
      LOD 300
      ZWrite Off
      Blend One One
      GpuProgramID 76865
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            lowp vec4 c_15;
            highp float nh_16;
            lowp float diff_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_17 = tmpvar_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_16 = tmpvar_19;
            mediump float y_20;
            y_20 = (_Shininess * 128.0);
            highp float tmpvar_21;
            tmpvar_21 = (pow (nh_16, y_20) * tmpvar_10.w);
            c_15.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_17)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_21));
            c_15.w = (tmpvar_10.w * _Color.w);
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            c_3.xyz = c_14.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            lowp vec4 c_15;
            highp float nh_16;
            lowp float diff_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_17 = tmpvar_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_16 = tmpvar_19;
            mediump float y_20;
            y_20 = (_Shininess * 128.0);
            highp float tmpvar_21;
            tmpvar_21 = (pow (nh_16, y_20) * tmpvar_10.w);
            c_15.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_17)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_21));
            c_15.w = (tmpvar_10.w * _Color.w);
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            c_3.xyz = c_14.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            lowp vec4 c_15;
            highp float nh_16;
            lowp float diff_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_17 = tmpvar_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_16 = tmpvar_19;
            mediump float y_20;
            y_20 = (_Shininess * 128.0);
            highp float tmpvar_21;
            tmpvar_21 = (pow (nh_16, y_20) * tmpvar_10.w);
            c_15.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_17)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_21));
            c_15.w = (tmpvar_10.w * _Color.w);
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            c_3.xyz = c_14.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            lowp vec4 c_11;
            highp float nh_12;
            lowp float diff_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_13 = tmpvar_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_12 = tmpvar_15;
            mediump float y_16;
            y_16 = (_Shininess * 128.0);
            highp float tmpvar_17;
            tmpvar_17 = (pow (nh_12, y_16) * tmpvar_8.w);
            c_11.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_13)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_17));
            c_11.w = (tmpvar_8.w * _Color.w);
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            c_3.xyz = c_10.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            lowp vec4 c_17;
            highp float nh_18;
            lowp float diff_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_19 = tmpvar_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_18 = tmpvar_21;
            mediump float y_22;
            y_22 = (_Shininess * 128.0);
            highp float tmpvar_23;
            tmpvar_23 = (pow (nh_18, y_22) * tmpvar_9.w);
            c_17.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_19)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_23));
            c_17.w = (tmpvar_9.w * _Color.w);
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            c_3.xyz = c_16.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            lowp vec4 c_17;
            highp float nh_18;
            lowp float diff_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_19 = tmpvar_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_18 = tmpvar_21;
            mediump float y_22;
            y_22 = (_Shininess * 128.0);
            highp float tmpvar_23;
            tmpvar_23 = (pow (nh_18, y_22) * tmpvar_9.w);
            c_17.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_19)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_23));
            c_17.w = (tmpvar_9.w * _Color.w);
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            c_3.xyz = c_16.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4);
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            lowp vec4 c_17;
            highp float nh_18;
            lowp float diff_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_19 = tmpvar_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_18 = tmpvar_21;
            mediump float y_22;
            y_22 = (_Shininess * 128.0);
            highp float tmpvar_23;
            tmpvar_23 = (pow (nh_18, y_22) * tmpvar_9.w);
            c_17.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_19)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_23));
            c_17.w = (tmpvar_9.w * _Color.w);
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            c_3.xyz = c_16.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            highp vec4 tmpvar_4;
            tmpvar_4 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_4.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_4).xy;
            xlv_TEXCOORD4 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            lowp vec4 c_13;
            highp float nh_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_15 = tmpvar_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_14 = tmpvar_17;
            mediump float y_18;
            y_18 = (_Shininess * 128.0);
            highp float tmpvar_19;
            tmpvar_19 = (pow (nh_14, y_18) * tmpvar_9.w);
            c_13.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_15)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
            c_13.w = (tmpvar_9.w * _Color.w);
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            c_3.xyz = c_12.xyz;
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_10.w);
            c_14.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_16)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_10.w * _Color.w);
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_14.xyz * vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_10.w);
            c_14.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_16)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_10.w * _Color.w);
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_14.xyz * vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            highp vec3 lightCoord_5;
            lowp vec3 tmpvar_6;
            highp vec3 worldViewDir_7;
            lowp vec3 lightDir_8;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_8 = tmpvar_9;
            worldViewDir_7 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_6 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = xlv_TEXCOORD2;
            lightCoord_5 = (unity_WorldToLight * tmpvar_11).xyz;
            highp float tmpvar_12;
            tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_5, lightCoord_5))).x;
            atten_4 = tmpvar_12;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_8;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_13;
            viewDir_13 = worldViewDir_7;
            lowp vec4 c_14;
            highp float nh_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_2));
            diff_16 = tmpvar_17;
            mediump float tmpvar_18;
            tmpvar_18 = max (0.0, dot (tmpvar_6, normalize(
              (tmpvar_2 + viewDir_13)
            )));
            nh_15 = tmpvar_18;
            mediump float y_19;
            y_19 = (_Shininess * 128.0);
            highp float tmpvar_20;
            tmpvar_20 = (pow (nh_15, y_19) * tmpvar_10.w);
            c_14.xyz = (((tmpvar_10.xyz * _Color.xyz) * (tmpvar_1 * diff_16)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_20));
            c_14.w = (tmpvar_10.w * _Color.w);
            highp float tmpvar_21;
            tmpvar_21 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_14.xyz * vec3(tmpvar_21));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_10.xyz * vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_10.xyz * vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp vec3 tmpvar_4;
            highp vec3 worldViewDir_5;
            lowp vec3 lightDir_6;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_7;
            worldViewDir_5 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            mediump vec3 viewDir_9;
            viewDir_9 = worldViewDir_5;
            lowp vec4 c_10;
            highp float nh_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            mediump float tmpvar_14;
            tmpvar_14 = max (0.0, dot (tmpvar_4, normalize(
              (tmpvar_2 + viewDir_9)
            )));
            nh_11 = tmpvar_14;
            mediump float y_15;
            y_15 = (_Shininess * 128.0);
            highp float tmpvar_16;
            tmpvar_16 = (pow (nh_11, y_15) * tmpvar_8.w);
            c_10.xyz = (((tmpvar_8.xyz * _Color.xyz) * (tmpvar_1 * diff_12)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_16));
            c_10.w = (tmpvar_8.w * _Color.w);
            highp float tmpvar_17;
            tmpvar_17 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_10.xyz * vec3(tmpvar_17));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat12 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat12);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat12 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat12);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          mediump float u_xlat16_13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
              u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_13 = inversesqrt(u_xlat16_13);
              u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_14) + u_xlat16_0.xyz;
              u_xlat12 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
          #else
              u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat12);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5);
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            highp float nh_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_17 = tmpvar_20;
            mediump float y_21;
            y_21 = (_Shininess * 128.0);
            highp float tmpvar_22;
            tmpvar_22 = (pow (nh_17, y_21) * tmpvar_9.w);
            c_16.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_18)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_22));
            c_16.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_23;
            tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_16.xyz * vec3(tmpvar_23));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5);
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            highp float nh_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_17 = tmpvar_20;
            mediump float y_21;
            y_21 = (_Shininess * 128.0);
            highp float tmpvar_22;
            tmpvar_22 = (pow (nh_17, y_21) * tmpvar_9.w);
            c_16.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_18)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_22));
            c_16.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_23;
            tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_16.xyz * vec3(tmpvar_23));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5);
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp float tmpvar_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
            tmpvar_10 = tmpvar_11.w;
            lowp float tmpvar_12;
            highp vec4 tmpvar_13;
            tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
            tmpvar_12 = tmpvar_13.x;
            highp float tmpvar_14;
            tmpvar_14 = ((float(
              (xlv_TEXCOORD3.z > 0.0)
            ) * tmpvar_10) * tmpvar_12);
            atten_4 = tmpvar_14;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_15;
            viewDir_15 = worldViewDir_6;
            lowp vec4 c_16;
            highp float nh_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            mediump float tmpvar_20;
            tmpvar_20 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_15)
            )));
            nh_17 = tmpvar_20;
            mediump float y_21;
            y_21 = (_Shininess * 128.0);
            highp float tmpvar_22;
            tmpvar_22 = (pow (nh_17, y_21) * tmpvar_9.w);
            c_16.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_18)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_22));
            c_16.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_23;
            tmpvar_23 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_16.xyz * vec3(tmpvar_23));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat15;
          mediump float u_xlat16_17;
          mediump float u_xlat16_18;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = inversesqrt(u_xlat16_18);
              u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
              u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
              u_xlat16_18 = max(u_xlat16_18, 0.0);
              u_xlat16_0.x = log2(u_xlat16_18);
              u_xlat16_18 = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_18;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xyz;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).x * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec3 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
              vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          vec3 u_xlat1;
          lowp vec4 u_xlat10_1;
          mediump vec4 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          float u_xlat10;
          float u_xlat15;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
              u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
              u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
              u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
              u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
              u_xlat16_0.x = log2(u_xlat16_2.x);
              u_xlat16_2.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_2.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xyz).w;
              u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
              u_xlat5.x = u_xlat5.x * u_xlat10;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xy;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xy;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp mat4 unity_WorldToLight;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xyz = _glesVertex.xyz;
            tmpvar_2 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
            highp mat3 tmpvar_4;
            tmpvar_4[0] = unity_WorldToObject[0].xyz;
            tmpvar_4[1] = unity_WorldToObject[1].xyz;
            tmpvar_4[2] = unity_WorldToObject[2].xyz;
            gl_Position = tmpvar_2;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_4));
            highp vec4 tmpvar_5;
            tmpvar_5 = (unity_ObjectToWorld * _glesVertex);
            xlv_TEXCOORD2 = tmpvar_5.xyz;
            xlv_TEXCOORD3 = (unity_WorldToLight * tmpvar_5).xy;
            xlv_TEXCOORD4 = tmpvar_1;
            xlv_TEXCOORD5 = ((tmpvar_2.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform lowp vec4 _SpecColor;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec2 xlv_TEXCOORD3;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 c_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            highp vec3 worldViewDir_6;
            lowp vec3 lightDir_7;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_7 = tmpvar_8;
            worldViewDir_6 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
            atten_4 = tmpvar_10;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_7;
            tmpvar_1 = (tmpvar_1 * atten_4);
            mediump vec3 viewDir_11;
            viewDir_11 = worldViewDir_6;
            lowp vec4 c_12;
            highp float nh_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_5, normalize(
              (tmpvar_2 + viewDir_11)
            )));
            nh_13 = tmpvar_16;
            mediump float y_17;
            y_17 = (_Shininess * 128.0);
            highp float tmpvar_18;
            tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
            c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
            c_12.w = (tmpvar_9.w * _Color.w);
            highp float tmpvar_19;
            tmpvar_19 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_3.xyz = (c_12.xyz * vec3(tmpvar_19));
            c_3.w = 1.0;
            gl_FragData[0] = c_3;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD1;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          float u_xlat9;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
              u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
              gl_Position = u_xlat1;
              vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
              u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
              vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	mediump vec4 _SpecColor;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp float vs_TEXCOORD5;
          in highp vec3 vs_TEXCOORD2;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec3 u_xlat16_0;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat5;
          float u_xlat15;
          mediump float u_xlat16_16;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat15 = inversesqrt(u_xlat15);
              u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
              u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
              u_xlat16_16 = inversesqrt(u_xlat16_16);
              u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
              u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
              u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
              u_xlat16_0.x = log2(u_xlat16_1.x);
              u_xlat16_1.x = _Shininess * 128.0;
              u_xlat16_0.x = u_xlat16_0.x * u_xlat16_1.x;
              u_xlat16_0.x = exp2(u_xlat16_0.x);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.w;
              u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat5.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat5.xy;
              u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat5.xy;
              u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat5.x = texture(_LightTexture0, u_xlat5.xy).w;
              u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_0.xyz;
              u_xlat15 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
          #else
              u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
              SV_Target0.xyz = u_xlat0.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 3, name: PREPASS
    {
      Name "PREPASS"
      Tags
      { 
        "LIGHTMODE" = "PREPASSBASE"
        "RenderType" = "Opaque"
      }
      LOD 300
      GpuProgramID 162707
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 tmpvar_1;
            tmpvar_1.w = 1.0;
            tmpvar_1.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_2;
            tmpvar_2[0] = unity_WorldToObject[0].xyz;
            tmpvar_2[1] = unity_WorldToObject[1].xyz;
            tmpvar_2[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump float _Shininess;
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = _Shininess;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 tmpvar_1;
            tmpvar_1.w = 1.0;
            tmpvar_1.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_2;
            tmpvar_2[0] = unity_WorldToObject[0].xyz;
            tmpvar_2[1] = unity_WorldToObject[1].xyz;
            tmpvar_2[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump float _Shininess;
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = _Shininess;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 tmpvar_1;
            tmpvar_1.w = 1.0;
            tmpvar_1.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_2;
            tmpvar_2[0] = unity_WorldToObject[0].xyz;
            tmpvar_2[1] = unity_WorldToObject[1].xyz;
            tmpvar_2[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump float _Shininess;
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = _Shininess;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump float _Shininess;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = _Shininess;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump float _Shininess;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = _Shininess;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump float _Shininess;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = _Shininess;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 4, name: PREPASS
    {
      Name "PREPASS"
      Tags
      { 
        "LIGHTMODE" = "PREPASSFINAL"
        "RenderType" = "Opaque"
      }
      LOD 300
      ZWrite Off
      GpuProgramID 223478
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_6.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_7.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          lowp vec4 u_xlat10_1;
          mediump float u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2 = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = vec3(u_xlat16_2) * u_xlat16_4.xyz;
              SV_Target0.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2.xyz = c_8.xyz;
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 c_6;
            lowp float spec_7;
            mediump float tmpvar_8;
            tmpvar_8 = (light_3.w * tmpvar_4.w);
            spec_7 = tmpvar_8;
            c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
            c_6.w = (tmpvar_4.w * _Color.w);
            c_2 = c_6;
            highp float tmpvar_9;
            tmpvar_9 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_9));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = (-u_xlat16_0.w) * u_xlat10_1.w;
              u_xlat3.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
             * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (light_3.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_0 = log2(u_xlat16_0);
              u_xlat2.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = (-u_xlat16_0.w) * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 c_7;
            lowp float spec_8;
            mediump float tmpvar_9;
            tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
            spec_8 = tmpvar_9;
            c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
            c_7.w = (tmpvar_4.w * _Color.w);
            c_2 = c_7;
            highp float tmpvar_10;
            tmpvar_10 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_10));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          vec3 u_xlat3;
          mediump vec3 u_xlat16_4;
          mediump vec3 u_xlat16_7;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_2.x = u_xlat16_0.w * u_xlat10_1.w;
              u_xlat3.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
              u_xlat16_4.xyz = u_xlat3.xyz * _SpecColor.xyz;
              u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz;
              u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat3.xyz + u_xlat16_4.xyz;
              u_xlat16_1.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
              u_xlat16 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
          #else
              u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
          #endif
              u_xlat1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat1.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_FogParams;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = _glesVertex.xyz;
            tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            highp vec4 o_5;
            highp vec4 tmpvar_6;
            tmpvar_6 = (tmpvar_3 * 0.5);
            highp vec2 tmpvar_7;
            tmpvar_7.x = tmpvar_6.x;
            tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
            o_5.xy = (tmpvar_7 + tmpvar_6.w);
            o_5.zw = tmpvar_3.zw;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
            mediump vec4 normal_10;
            normal_10 = tmpvar_9;
            mediump vec3 res_11;
            mediump vec3 x_12;
            x_12.x = dot (unity_SHAr, normal_10);
            x_12.y = dot (unity_SHAg, normal_10);
            x_12.z = dot (unity_SHAb, normal_10);
            mediump vec3 x1_13;
            mediump vec4 tmpvar_14;
            tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
            x1_13.x = dot (unity_SHBr, tmpvar_14);
            x1_13.y = dot (unity_SHBg, tmpvar_14);
            x1_13.z = dot (unity_SHBb, tmpvar_14);
            res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_15;
            tmpvar_15 = max (((1.055 * 
              pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_11 = tmpvar_15;
            tmpvar_2 = tmpvar_15;
            gl_Position = tmpvar_3;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD2 = o_5;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = ((tmpvar_3.z * unity_FogParams.z) + unity_FogParams.w);
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform lowp vec4 unity_FogColor;
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp float xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
            light_3 = tmpvar_5;
            mediump vec4 tmpvar_6;
            tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_6.w;
            light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            light_3.xyz = (light_3.xyz + pow ((
              (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
             * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
            lowp vec4 c_8;
            lowp float spec_9;
            mediump float tmpvar_10;
            tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
            spec_9 = tmpvar_10;
            c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
            c_8.w = (tmpvar_4.w * _Color.w);
            c_2 = c_8;
            highp float tmpvar_11;
            tmpvar_11 = clamp (xlv_TEXCOORD5, 0.0, 1.0);
            c_2.xyz = mix (unity_FogColor.xyz, c_2.xyz, vec3(tmpvar_11));
            c_2.w = 1.0;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_FogParams;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp float vs_TEXCOORD5;
          out highp vec3 vs_TEXCOORD1;
          out highp vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              gl_Position = u_xlat0;
              vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
              u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD2.zw = u_xlat0.zw;
              vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_FogColor;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp float vs_TEXCOORD5;
          in highp vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec3 u_xlat2;
          mediump vec3 u_xlat16_2;
          lowp vec4 u_xlat10_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          mediump float u_xlat16_16;
          float u_xlat17;
          void main()
          {
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_1.x = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
              u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
              u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat2.xyz = u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
              u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
              u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_16 = u_xlat16_0.w * u_xlat10_2.w;
              u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
              u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
              u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
              u_xlat17 = vs_TEXCOORD5;
          #ifdef UNITY_ADRENO_ES3
              u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
          #else
              u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
          #endif
              u_xlat2.xyz = vec3(u_xlat17) * u_xlat16_2.xyz + unity_FogColor.xyz;
              SV_Target0.xyz = u_xlat2.xyz;
              SV_Target0.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_LINEAR" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 5, name: DEFERRED
    {
      Name "DEFERRED"
      Tags
      { 
        "LIGHTMODE" = "DEFERRED"
        "RenderType" = "Opaque"
      }
      LOD 300
      GpuProgramID 302024
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = emission_5.xyz;
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = emission_5.xyz;
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = emission_5.xyz;
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              SV_Target0.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              SV_Target0.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              SV_Target0.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_1.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            outEmission_1.w = emission_5.w;
            outEmission_1.xyz = exp2(-(emission_5.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            mediump vec3 tmpvar_8;
            highp vec3 tmpvar_9;
            tmpvar_7 = tmpvar_3;
            tmpvar_8 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_9 = tmpvar_2;
            mediump vec4 outGBuffer2_10;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = 1.0;
            mediump vec4 tmpvar_12;
            tmpvar_12.xyz = tmpvar_8;
            tmpvar_12.w = _Shininess;
            highp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = ((tmpvar_9 * 0.5) + 0.5);
            outGBuffer2_10 = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_14;
            emission_6.xyz = (emission_6.xyz + (tmpvar_3 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_5.w) * tmpvar_5.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_11;
            gl_FragData[1] = tmpvar_12;
            gl_FragData[2] = outGBuffer2_10;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            mediump vec3 tmpvar_8;
            highp vec3 tmpvar_9;
            tmpvar_7 = tmpvar_3;
            tmpvar_8 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_9 = tmpvar_2;
            mediump vec4 outGBuffer2_10;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = 1.0;
            mediump vec4 tmpvar_12;
            tmpvar_12.xyz = tmpvar_8;
            tmpvar_12.w = _Shininess;
            highp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = ((tmpvar_9 * 0.5) + 0.5);
            outGBuffer2_10 = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_14;
            emission_6.xyz = (emission_6.xyz + (tmpvar_3 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_5.w) * tmpvar_5.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_11;
            gl_FragData[1] = tmpvar_12;
            gl_FragData[2] = outGBuffer2_10;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            mediump vec3 tmpvar_8;
            highp vec3 tmpvar_9;
            tmpvar_7 = tmpvar_3;
            tmpvar_8 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_9 = tmpvar_2;
            mediump vec4 outGBuffer2_10;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = 1.0;
            mediump vec4 tmpvar_12;
            tmpvar_12.xyz = tmpvar_8;
            tmpvar_12.w = _Shininess;
            highp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = ((tmpvar_9 * 0.5) + 0.5);
            outGBuffer2_10 = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_14;
            emission_6.xyz = (emission_6.xyz + (tmpvar_3 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_5.w) * tmpvar_5.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_11;
            gl_FragData[1] = tmpvar_12;
            gl_FragData[2] = outGBuffer2_10;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec3 normalWorld_5;
            normalWorld_5 = tmpvar_2;
            mediump vec4 realtimeDirTex_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_6 = tmpvar_8;
            lowp vec4 dirTex_9;
            dirTex_9 = realtimeDirTex_6;
            lowp vec3 y_10;
            y_10 = (dirTex_9.xyz - 0.5);
            lowp float tmpvar_11;
            tmpvar_11 = max (0.0001, dirTex_9.w);
            mediump vec4 emission_12;
            mediump vec3 tmpvar_13;
            mediump vec3 tmpvar_14;
            highp vec3 tmpvar_15;
            tmpvar_13 = tmpvar_3;
            tmpvar_14 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_15 = tmpvar_2;
            mediump vec4 outGBuffer2_16;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = 1.0;
            mediump vec4 tmpvar_18;
            tmpvar_18.xyz = tmpvar_14;
            tmpvar_18.w = _Shininess;
            highp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
            outGBuffer2_16 = tmpvar_19;
            lowp vec4 tmpvar_20;
            tmpvar_20.w = 1.0;
            tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
            emission_12 = tmpvar_20;
            emission_12.xyz = (emission_12.xyz + (tmpvar_3 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_7.w) * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_5, y_10) + 0.5))
             / tmpvar_11)));
            outEmission_1.w = emission_12.w;
            outEmission_1.xyz = exp2(-(emission_12.xyz));
            gl_FragData[0] = tmpvar_17;
            gl_FragData[1] = tmpvar_18;
            gl_FragData[2] = outGBuffer2_16;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec3 normalWorld_5;
            normalWorld_5 = tmpvar_2;
            mediump vec4 realtimeDirTex_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_6 = tmpvar_8;
            lowp vec4 dirTex_9;
            dirTex_9 = realtimeDirTex_6;
            lowp vec3 y_10;
            y_10 = (dirTex_9.xyz - 0.5);
            lowp float tmpvar_11;
            tmpvar_11 = max (0.0001, dirTex_9.w);
            mediump vec4 emission_12;
            mediump vec3 tmpvar_13;
            mediump vec3 tmpvar_14;
            highp vec3 tmpvar_15;
            tmpvar_13 = tmpvar_3;
            tmpvar_14 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_15 = tmpvar_2;
            mediump vec4 outGBuffer2_16;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = 1.0;
            mediump vec4 tmpvar_18;
            tmpvar_18.xyz = tmpvar_14;
            tmpvar_18.w = _Shininess;
            highp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
            outGBuffer2_16 = tmpvar_19;
            lowp vec4 tmpvar_20;
            tmpvar_20.w = 1.0;
            tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
            emission_12 = tmpvar_20;
            emission_12.xyz = (emission_12.xyz + (tmpvar_3 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_7.w) * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_5, y_10) + 0.5))
             / tmpvar_11)));
            outEmission_1.w = emission_12.w;
            outEmission_1.xyz = exp2(-(emission_12.xyz));
            gl_FragData[0] = tmpvar_17;
            gl_FragData[1] = tmpvar_18;
            gl_FragData[2] = outGBuffer2_16;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_3 = (tmpvar_4.xyz * _Color.xyz);
            mediump vec3 normalWorld_5;
            normalWorld_5 = tmpvar_2;
            mediump vec4 realtimeDirTex_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_6 = tmpvar_8;
            lowp vec4 dirTex_9;
            dirTex_9 = realtimeDirTex_6;
            lowp vec3 y_10;
            y_10 = (dirTex_9.xyz - 0.5);
            lowp float tmpvar_11;
            tmpvar_11 = max (0.0001, dirTex_9.w);
            mediump vec4 emission_12;
            mediump vec3 tmpvar_13;
            mediump vec3 tmpvar_14;
            highp vec3 tmpvar_15;
            tmpvar_13 = tmpvar_3;
            tmpvar_14 = ((_SpecColor.xyz * tmpvar_4.w) * 0.3183099);
            tmpvar_15 = tmpvar_2;
            mediump vec4 outGBuffer2_16;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = 1.0;
            mediump vec4 tmpvar_18;
            tmpvar_18.xyz = tmpvar_14;
            tmpvar_18.w = _Shininess;
            highp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = ((tmpvar_15 * 0.5) + 0.5);
            outGBuffer2_16 = tmpvar_19;
            lowp vec4 tmpvar_20;
            tmpvar_20.w = 1.0;
            tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
            emission_12 = tmpvar_20;
            emission_12.xyz = (emission_12.xyz + (tmpvar_3 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_7.w) * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_5, y_10) + 0.5))
             / tmpvar_11)));
            outEmission_1.w = emission_12.w;
            outEmission_1.xyz = exp2(-(emission_12.xyz));
            gl_FragData[0] = tmpvar_17;
            gl_FragData[1] = tmpvar_18;
            gl_FragData[2] = outGBuffer2_16;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec4 emission_4;
            mediump vec3 tmpvar_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_5 = tmpvar_2;
            tmpvar_6 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_5;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = _Shininess;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_4 = tmpvar_12;
            emission_4.xyz = (emission_4.xyz + (tmpvar_2 * xlv_TEXCOORD4));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec4 emission_4;
            mediump vec3 tmpvar_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_5 = tmpvar_2;
            tmpvar_6 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_5;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = _Shininess;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_4 = tmpvar_12;
            emission_4.xyz = (emission_4.xyz + (tmpvar_2 * xlv_TEXCOORD4));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_4;
            tmpvar_4 = normalize((_glesNormal * tmpvar_3));
            tmpvar_1.zw = vec2(0.0, 0.0);
            tmpvar_1.xy = vec2(0.0, 0.0);
            mediump vec3 normal_5;
            normal_5 = tmpvar_4;
            mediump vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = normal_5;
            mediump vec3 res_7;
            mediump vec3 x_8;
            x_8.x = dot (unity_SHAr, tmpvar_6);
            x_8.y = dot (unity_SHAg, tmpvar_6);
            x_8.z = dot (unity_SHAb, tmpvar_6);
            mediump vec3 x1_9;
            mediump vec4 tmpvar_10;
            tmpvar_10 = (normal_5.xyzz * normal_5.yzzx);
            x1_9.x = dot (unity_SHBr, tmpvar_10);
            x1_9.y = dot (unity_SHBg, tmpvar_10);
            x1_9.z = dot (unity_SHBb, tmpvar_10);
            res_7 = (x_8 + (x1_9 + (unity_SHC.xyz * 
              ((normal_5.x * normal_5.x) - (normal_5.y * normal_5.y))
            )));
            mediump vec3 tmpvar_11;
            tmpvar_11 = max (((1.055 * 
              pow (max (res_7, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_7 = tmpvar_11;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_4;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_11);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec4 emission_4;
            mediump vec3 tmpvar_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_5 = tmpvar_2;
            tmpvar_6 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_5;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = _Shininess;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_4 = tmpvar_12;
            emission_4.xyz = (emission_4.xyz + (tmpvar_2 * xlv_TEXCOORD4));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_4;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD4.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_2;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_8 = tmpvar_1;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_2 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_4.w) * tmpvar_4.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_2;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_8 = tmpvar_1;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_2 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_4.w) * tmpvar_4.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            lowp vec4 tmpvar_4;
            tmpvar_4 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_6 = tmpvar_2;
            tmpvar_7 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_8 = tmpvar_1;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_6;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = tmpvar_7;
            tmpvar_11.w = _Shininess;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_13;
            emission_5.xyz = (emission_5.xyz + (tmpvar_2 * pow (
              ((unity_DynamicLightmap_HDR.x * tmpvar_4.w) * tmpvar_4.xyz)
            , unity_DynamicLightmap_HDR.yyy)));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_10 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              SV_Target3.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec3 normalWorld_4;
            normalWorld_4 = tmpvar_1;
            mediump vec4 realtimeDirTex_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_5 = tmpvar_7;
            lowp vec4 dirTex_8;
            dirTex_8 = realtimeDirTex_5;
            lowp vec3 y_9;
            y_9 = (dirTex_8.xyz - 0.5);
            lowp float tmpvar_10;
            tmpvar_10 = max (0.0001, dirTex_8.w);
            mediump vec4 emission_11;
            mediump vec3 tmpvar_12;
            mediump vec3 tmpvar_13;
            highp vec3 tmpvar_14;
            tmpvar_12 = tmpvar_2;
            tmpvar_13 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_14 = tmpvar_1;
            mediump vec4 outGBuffer2_15;
            mediump vec4 tmpvar_16;
            tmpvar_16.xyz = tmpvar_12;
            tmpvar_16.w = 1.0;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = _Shininess;
            highp vec4 tmpvar_18;
            tmpvar_18.w = 1.0;
            tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
            outGBuffer2_15 = tmpvar_18;
            lowp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
            emission_11 = tmpvar_19;
            emission_11.xyz = (emission_11.xyz + (tmpvar_2 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_6.w) * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_4, y_9) + 0.5))
             / tmpvar_10)));
            gl_FragData[0] = tmpvar_16;
            gl_FragData[1] = tmpvar_17;
            gl_FragData[2] = outGBuffer2_15;
            gl_FragData[3] = emission_11;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec3 normalWorld_4;
            normalWorld_4 = tmpvar_1;
            mediump vec4 realtimeDirTex_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_5 = tmpvar_7;
            lowp vec4 dirTex_8;
            dirTex_8 = realtimeDirTex_5;
            lowp vec3 y_9;
            y_9 = (dirTex_8.xyz - 0.5);
            lowp float tmpvar_10;
            tmpvar_10 = max (0.0001, dirTex_8.w);
            mediump vec4 emission_11;
            mediump vec3 tmpvar_12;
            mediump vec3 tmpvar_13;
            highp vec3 tmpvar_14;
            tmpvar_12 = tmpvar_2;
            tmpvar_13 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_14 = tmpvar_1;
            mediump vec4 outGBuffer2_15;
            mediump vec4 tmpvar_16;
            tmpvar_16.xyz = tmpvar_12;
            tmpvar_16.w = 1.0;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = _Shininess;
            highp vec4 tmpvar_18;
            tmpvar_18.w = 1.0;
            tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
            outGBuffer2_15 = tmpvar_18;
            lowp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
            emission_11 = tmpvar_19;
            emission_11.xyz = (emission_11.xyz + (tmpvar_2 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_6.w) * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_4, y_9) + 0.5))
             / tmpvar_10)));
            gl_FragData[0] = tmpvar_16;
            gl_FragData[1] = tmpvar_17;
            gl_FragData[2] = outGBuffer2_15;
            gl_FragData[3] = emission_11;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            highp vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            tmpvar_2.w = 1.0;
            tmpvar_2.xyz = _glesVertex.xyz;
            highp mat3 tmpvar_3;
            tmpvar_3[0] = unity_WorldToObject[0].xyz;
            tmpvar_3[1] = unity_WorldToObject[1].xyz;
            tmpvar_3[2] = unity_WorldToObject[2].xyz;
            tmpvar_1.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
            tmpvar_1.xy = vec2(0.0, 0.0);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D unity_DynamicLightmap;
          uniform sampler2D unity_DynamicDirectionality;
          uniform mediump vec4 unity_DynamicLightmap_HDR;
          uniform lowp vec4 _SpecColor;
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform mediump float _Shininess;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec4 xlv_TEXCOORD3;
          void main ()
          {
            lowp vec3 tmpvar_1;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
            tmpvar_2 = (tmpvar_3.xyz * _Color.xyz);
            mediump vec3 normalWorld_4;
            normalWorld_4 = tmpvar_1;
            mediump vec4 realtimeDirTex_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD3.zw);
            realtimeDirTex_5 = tmpvar_7;
            lowp vec4 dirTex_8;
            dirTex_8 = realtimeDirTex_5;
            lowp vec3 y_9;
            y_9 = (dirTex_8.xyz - 0.5);
            lowp float tmpvar_10;
            tmpvar_10 = max (0.0001, dirTex_8.w);
            mediump vec4 emission_11;
            mediump vec3 tmpvar_12;
            mediump vec3 tmpvar_13;
            highp vec3 tmpvar_14;
            tmpvar_12 = tmpvar_2;
            tmpvar_13 = ((_SpecColor.xyz * tmpvar_3.w) * 0.3183099);
            tmpvar_14 = tmpvar_1;
            mediump vec4 outGBuffer2_15;
            mediump vec4 tmpvar_16;
            tmpvar_16.xyz = tmpvar_12;
            tmpvar_16.w = 1.0;
            mediump vec4 tmpvar_17;
            tmpvar_17.xyz = tmpvar_13;
            tmpvar_17.w = _Shininess;
            highp vec4 tmpvar_18;
            tmpvar_18.w = 1.0;
            tmpvar_18.xyz = ((tmpvar_14 * 0.5) + 0.5);
            outGBuffer2_15 = tmpvar_18;
            lowp vec4 tmpvar_19;
            tmpvar_19.w = 1.0;
            tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
            emission_11 = tmpvar_19;
            emission_11.xyz = (emission_11.xyz + (tmpvar_2 * (
              (pow (((unity_DynamicLightmap_HDR.x * tmpvar_6.w) * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy) * (dot (normalWorld_4, y_9) + 0.5))
             / tmpvar_10)));
            gl_FragData[0] = tmpvar_16;
            gl_FragData[1] = tmpvar_17;
            gl_FragData[2] = outGBuffer2_15;
            gl_FragData[3] = emission_11;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          vec4 u_xlat0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              vs_TEXCOORD3.xy = vec2(0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 unity_DynamicLightmap_HDR;
          uniform 	mediump vec4 _SpecColor;
          uniform 	mediump vec4 _Color;
          uniform 	mediump float _Shininess;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D unity_DynamicLightmap;
          uniform lowp sampler2D unity_DynamicDirectionality;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec3 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              SV_Target0.w = 1.0;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_2.xyz = u_xlat10_0.www * _SpecColor.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
              SV_Target1.xyz = u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target1.w = _Shininess;
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              u_xlat10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
              u_xlat16_13 = u_xlat10_0.w * unity_DynamicLightmap_HDR.x;
              u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(u_xlat16_13);
              u_xlat16_2.xyz = log2(u_xlat16_2.xyz);
              u_xlat16_2.xyz = u_xlat16_2.xyz * unity_DynamicLightmap_HDR.yyy;
              u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
              u_xlat10_0 = texture(unity_DynamicDirectionality, vs_TEXCOORD3.zw);
              u_xlat16_3.xyz = u_xlat10_0.xyz + vec3(-0.5, -0.5, -0.5);
              u_xlat16_0.x = max(u_xlat10_0.w, 9.99999975e-05);
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
              u_xlat16_13 = u_xlat16_13 + 0.5;
              u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz;
              u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.xxx;
              SV_Target3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 6, name: Meta
    {
      Name "Meta"
      Tags
      { 
        "LIGHTMODE" = "META"
        "RenderType" = "Opaque"
      }
      LOD 300
      Cull Off
      GpuProgramID 367258
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord1;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_LightmapST;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform bvec4 unity_MetaVertexControl;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 vertex_1;
            vertex_1 = _glesVertex;
            if (unity_MetaVertexControl.x) {
              vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
              highp float tmpvar_2;
              if ((_glesVertex.z > 0.0)) {
                tmpvar_2 = 0.0001;
              } else {
                tmpvar_2 = 0.0;
              };
              vertex_1.z = tmpvar_2;
            };
            if (unity_MetaVertexControl.y) {
              vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
              highp float tmpvar_3;
              if ((vertex_1.z > 0.0)) {
                tmpvar_3 = 0.0001;
              } else {
                tmpvar_3 = 0.0;
              };
              vertex_1.z = tmpvar_3;
            };
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = vertex_1.xyz;
            gl_Position = (unity_MatrixVP * tmpvar_4);
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform bvec4 unity_MetaFragmentControl;
          uniform highp float unity_OneOverOutputBoost;
          uniform highp float unity_MaxOutputValue;
          uniform highp float unity_UseLinearSpace;
          varying highp vec2 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
            tmpvar_2 = tmpvar_3;
            mediump vec4 res_4;
            res_4 = vec4(0.0, 0.0, 0.0, 0.0);
            if (unity_MetaFragmentControl.x) {
              mediump vec4 tmpvar_5;
              tmpvar_5.w = 1.0;
              tmpvar_5.xyz = tmpvar_2;
              res_4.w = tmpvar_5.w;
              highp vec3 tmpvar_6;
              tmpvar_6 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
              res_4.xyz = tmpvar_6;
            };
            if (unity_MetaFragmentControl.y) {
              mediump vec3 emission_7;
              if (bool(unity_UseLinearSpace)) {
                emission_7 = vec3(0.0, 0.0, 0.0);
              } else {
                emission_7 = vec3(0.0, 0.0, 0.0);
              };
              mediump vec4 tmpvar_8;
              tmpvar_8.w = 1.0;
              tmpvar_8.xyz = emission_7;
              res_4 = tmpvar_8;
            };
            tmpvar_1 = res_4;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord1;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_LightmapST;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform bvec4 unity_MetaVertexControl;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 vertex_1;
            vertex_1 = _glesVertex;
            if (unity_MetaVertexControl.x) {
              vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
              highp float tmpvar_2;
              if ((_glesVertex.z > 0.0)) {
                tmpvar_2 = 0.0001;
              } else {
                tmpvar_2 = 0.0;
              };
              vertex_1.z = tmpvar_2;
            };
            if (unity_MetaVertexControl.y) {
              vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
              highp float tmpvar_3;
              if ((vertex_1.z > 0.0)) {
                tmpvar_3 = 0.0001;
              } else {
                tmpvar_3 = 0.0;
              };
              vertex_1.z = tmpvar_3;
            };
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = vertex_1.xyz;
            gl_Position = (unity_MatrixVP * tmpvar_4);
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform bvec4 unity_MetaFragmentControl;
          uniform highp float unity_OneOverOutputBoost;
          uniform highp float unity_MaxOutputValue;
          uniform highp float unity_UseLinearSpace;
          varying highp vec2 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
            tmpvar_2 = tmpvar_3;
            mediump vec4 res_4;
            res_4 = vec4(0.0, 0.0, 0.0, 0.0);
            if (unity_MetaFragmentControl.x) {
              mediump vec4 tmpvar_5;
              tmpvar_5.w = 1.0;
              tmpvar_5.xyz = tmpvar_2;
              res_4.w = tmpvar_5.w;
              highp vec3 tmpvar_6;
              tmpvar_6 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
              res_4.xyz = tmpvar_6;
            };
            if (unity_MetaFragmentControl.y) {
              mediump vec3 emission_7;
              if (bool(unity_UseLinearSpace)) {
                emission_7 = vec3(0.0, 0.0, 0.0);
              } else {
                emission_7 = vec3(0.0, 0.0, 0.0);
              };
              mediump vec4 tmpvar_8;
              tmpvar_8.w = 1.0;
              tmpvar_8.xyz = emission_7;
              res_4 = tmpvar_8;
            };
            tmpvar_1 = res_4;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesMultiTexCoord0;
          attribute vec4 _glesMultiTexCoord1;
          attribute vec4 _glesMultiTexCoord2;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_MatrixVP;
          uniform highp vec4 unity_LightmapST;
          uniform highp vec4 unity_DynamicLightmapST;
          uniform bvec4 unity_MetaVertexControl;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          void main ()
          {
            highp vec4 vertex_1;
            vertex_1 = _glesVertex;
            if (unity_MetaVertexControl.x) {
              vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
              highp float tmpvar_2;
              if ((_glesVertex.z > 0.0)) {
                tmpvar_2 = 0.0001;
              } else {
                tmpvar_2 = 0.0;
              };
              vertex_1.z = tmpvar_2;
            };
            if (unity_MetaVertexControl.y) {
              vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
              highp float tmpvar_3;
              if ((vertex_1.z > 0.0)) {
                tmpvar_3 = 0.0001;
              } else {
                tmpvar_3 = 0.0;
              };
              vertex_1.z = tmpvar_3;
            };
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = vertex_1.xyz;
            gl_Position = (unity_MatrixVP * tmpvar_4);
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform lowp vec4 _Color;
          uniform bvec4 unity_MetaFragmentControl;
          uniform highp float unity_OneOverOutputBoost;
          uniform highp float unity_MaxOutputValue;
          uniform highp float unity_UseLinearSpace;
          varying highp vec2 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
            tmpvar_2 = tmpvar_3;
            mediump vec4 res_4;
            res_4 = vec4(0.0, 0.0, 0.0, 0.0);
            if (unity_MetaFragmentControl.x) {
              mediump vec4 tmpvar_5;
              tmpvar_5.w = 1.0;
              tmpvar_5.xyz = tmpvar_2;
              res_4.w = tmpvar_5.w;
              highp vec3 tmpvar_6;
              tmpvar_6 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
              res_4.xyz = tmpvar_6;
            };
            if (unity_MetaFragmentControl.y) {
              mediump vec3 emission_7;
              if (bool(unity_UseLinearSpace)) {
                emission_7 = vec3(0.0, 0.0, 0.0);
              } else {
                emission_7 = vec3(0.0, 0.0, 0.0);
              };
              mediump vec4 tmpvar_8;
              tmpvar_8.w = 1.0;
              tmpvar_8.xyz = emission_7;
              res_4 = tmpvar_8;
            };
            tmpvar_1 = res_4;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_LightmapST;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	bvec4 unity_MetaVertexControl;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD1;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          bool u_xlatb0;
          vec4 u_xlat1;
          bool u_xlatb6;
          void main()
          {
          #ifdef UNITY_ADRENO_ES3
              u_xlatb0 = !!(0.0<in_POSITION0.z);
          #else
              u_xlatb0 = 0.0<in_POSITION0.z;
          #endif
              u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
              u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb6 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb6 = 0.0<u_xlat0.z;
          #endif
              u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
              u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _Color;
          uniform 	bvec4 unity_MetaFragmentControl;
          uniform 	float unity_OneOverOutputBoost;
          uniform 	float unity_MaxOutputValue;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec3 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          float u_xlat6;
          void main()
          {
              u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
              u_xlat6 = unity_OneOverOutputBoost;
          #ifdef UNITY_ADRENO_ES3
              u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
          #else
              u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat6);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
              u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
              u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
              SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_LightmapST;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	bvec4 unity_MetaVertexControl;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD1;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          bool u_xlatb0;
          vec4 u_xlat1;
          bool u_xlatb6;
          void main()
          {
          #ifdef UNITY_ADRENO_ES3
              u_xlatb0 = !!(0.0<in_POSITION0.z);
          #else
              u_xlatb0 = 0.0<in_POSITION0.z;
          #endif
              u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
              u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb6 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb6 = 0.0<u_xlat0.z;
          #endif
              u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
              u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _Color;
          uniform 	bvec4 unity_MetaFragmentControl;
          uniform 	float unity_OneOverOutputBoost;
          uniform 	float unity_MaxOutputValue;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec3 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          float u_xlat6;
          void main()
          {
              u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
              u_xlat6 = unity_OneOverOutputBoost;
          #ifdef UNITY_ADRENO_ES3
              u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
          #else
              u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat6);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
              u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
              u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
              SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 unity_LightmapST;
          uniform 	vec4 unity_DynamicLightmapST;
          uniform 	bvec4 unity_MetaVertexControl;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec4 in_TEXCOORD0;
          in highp vec4 in_TEXCOORD1;
          in highp vec4 in_TEXCOORD2;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          vec4 u_xlat0;
          bool u_xlatb0;
          vec4 u_xlat1;
          bool u_xlatb6;
          void main()
          {
          #ifdef UNITY_ADRENO_ES3
              u_xlatb0 = !!(0.0<in_POSITION0.z);
          #else
              u_xlatb0 = 0.0<in_POSITION0.z;
          #endif
              u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
              u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb6 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb6 = 0.0<u_xlat0.z;
          #endif
              u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
              u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
              u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
              vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _Color;
          uniform 	bvec4 unity_MetaFragmentControl;
          uniform 	float unity_OneOverOutputBoost;
          uniform 	float unity_MaxOutputValue;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec3 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          float u_xlat6;
          void main()
          {
              u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
              u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
              u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
              u_xlat6 = unity_OneOverOutputBoost;
          #ifdef UNITY_ADRENO_ES3
              u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
          #else
              u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
          #endif
              u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat6);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
              u_xlat16_0.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
              u_xlat16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
              SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat16_0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
  }
  FallBack "Legacy Shaders/VertexLit"
}
