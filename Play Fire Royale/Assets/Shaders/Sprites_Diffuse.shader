Shader "Sprites/Diffuse"
{
  Properties
  {
    [PerRendererData] _MainTex ("Sprite Texture", 2D) = "white" {}
    _Color ("Tint", Color) = (1,1,1,1)
    [MaterialToggle] PixelSnap ("Pixel snap", float) = 0
    [HideInInspector] _RendererColor ("RendererColor", Color) = (1,1,1,1)
    [HideInInspector] _Flip ("Flip", Vector) = (1,1,1,1)
    [PerRendererData] _AlphaTex ("External Alpha", 2D) = "white" {}
    [PerRendererData] _EnableExternalAlpha ("Enable External Alpha", float) = 0
  }
  SubShader
  {
    Tags
    { 
      "CanUseSpriteAtlas" = "true"
      "IGNOREPROJECTOR" = "true"
      "PreviewType" = "Plane"
      "QUEUE" = "Transparent"
      "RenderType" = "Transparent"
    }
    Pass // ind: 1, name: FORWARD
    {
      Name "FORWARD"
      Tags
      { 
        "CanUseSpriteAtlas" = "true"
        "IGNOREPROJECTOR" = "true"
        "LIGHTMODE" = "FORWARDBASE"
        "PreviewType" = "Plane"
        "QUEUE" = "Transparent"
        "RenderType" = "Transparent"
        "SHADOWSUPPORT" = "true"
      }
      ZWrite Off
      Cull Off
      Blend One OneMinusSrcAlpha
      GpuProgramID 57546
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = normalize((_glesNormal * tmpvar_5));
            mediump vec3 normal_7;
            normal_7 = tmpvar_6;
            mediump vec3 x1_8;
            mediump vec4 tmpvar_9;
            tmpvar_9 = (normal_7.xyzz * normal_7.yzzx);
            x1_8.x = dot (unity_SHBr, tmpvar_9);
            x1_8.y = dot (unity_SHBg, tmpvar_9);
            x1_8.z = dot (unity_SHBb, tmpvar_9);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_6;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_8 + (unity_SHC.xyz * (
              (normal_7.x * normal_7.x)
             - 
              (normal_7.y * normal_7.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_3));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = tmpvar_5.xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = (unity_ObjectToWorld * tmpvar_5).xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            highp vec3 lightColor0_10;
            lightColor0_10 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_11;
            lightColor1_11 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_12;
            lightColor2_12 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_13;
            lightColor3_13 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_14;
            lightAttenSq_14 = unity_4LightAtten0;
            highp vec3 col_15;
            highp vec4 ndotl_16;
            highp vec4 lengthSq_17;
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
            lengthSq_17 = (tmpvar_18 * tmpvar_18);
            lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
            lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (lengthSq_17, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_17 = tmpvar_21;
            ndotl_16 = (tmpvar_18 * tmpvar_9.x);
            ndotl_16 = (ndotl_16 + (tmpvar_19 * tmpvar_9.y));
            ndotl_16 = (ndotl_16 + (tmpvar_20 * tmpvar_9.z));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
            ndotl_16 = tmpvar_22;
            highp vec4 tmpvar_23;
            tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
              (tmpvar_21 * lightAttenSq_14)
            ))));
            col_15 = (lightColor0_10 * tmpvar_23.x);
            col_15 = (col_15 + (lightColor1_11 * tmpvar_23.y));
            col_15 = (col_15 + (lightColor2_12 * tmpvar_23.z));
            col_15 = (col_15 + (lightColor3_13 * tmpvar_23.w));
            tmpvar_2 = col_15;
            mediump vec3 normal_24;
            normal_24 = tmpvar_9;
            mediump vec3 ambient_25;
            mediump vec4 tmpvar_26;
            tmpvar_26.w = 1.0;
            tmpvar_26.xyz = normal_24;
            mediump vec3 res_27;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_26);
            x_28.y = dot (unity_SHAg, tmpvar_26);
            x_28.z = dot (unity_SHAb, tmpvar_26);
            mediump vec3 x1_29;
            mediump vec4 tmpvar_30;
            tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
            x1_29.x = dot (unity_SHBr, tmpvar_30);
            x1_29.y = dot (unity_SHBg, tmpvar_30);
            x1_29.z = dot (unity_SHBb, tmpvar_30);
            res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
              ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
            )));
            mediump vec3 tmpvar_31;
            tmpvar_31 = max (((1.055 * 
              pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_27 = tmpvar_31;
            ambient_25 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
            tmpvar_2 = ambient_25;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = tmpvar_7;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_25;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp vec3 tmpvar_6;
            tmpvar_6 = (unity_ObjectToWorld * tmpvar_4).xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            highp vec3 lightColor0_9;
            lightColor0_9 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_10;
            lightColor1_10 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_11;
            lightColor2_11 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_12;
            lightColor3_12 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_13;
            lightAttenSq_13 = unity_4LightAtten0;
            highp vec3 col_14;
            highp vec4 ndotl_15;
            highp vec4 lengthSq_16;
            highp vec4 tmpvar_17;
            tmpvar_17 = (unity_4LightPosX0 - tmpvar_6.x);
            highp vec4 tmpvar_18;
            tmpvar_18 = (unity_4LightPosY0 - tmpvar_6.y);
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosZ0 - tmpvar_6.z);
            lengthSq_16 = (tmpvar_17 * tmpvar_17);
            lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
            lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
            highp vec4 tmpvar_20;
            tmpvar_20 = max (lengthSq_16, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_16 = tmpvar_20;
            ndotl_15 = (tmpvar_17 * tmpvar_8.x);
            ndotl_15 = (ndotl_15 + (tmpvar_18 * tmpvar_8.y));
            ndotl_15 = (ndotl_15 + (tmpvar_19 * tmpvar_8.z));
            highp vec4 tmpvar_21;
            tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
            ndotl_15 = tmpvar_21;
            highp vec4 tmpvar_22;
            tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
              (tmpvar_20 * lightAttenSq_13)
            ))));
            col_14 = (lightColor0_9 * tmpvar_22.x);
            col_14 = (col_14 + (lightColor1_10 * tmpvar_22.y));
            col_14 = (col_14 + (lightColor2_11 * tmpvar_22.z));
            col_14 = (col_14 + (lightColor3_12 * tmpvar_22.w));
            tmpvar_2 = col_14;
            mediump vec3 normal_23;
            normal_23 = tmpvar_8;
            mediump vec3 ambient_24;
            mediump vec3 x1_25;
            mediump vec4 tmpvar_26;
            tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
            x1_25.x = dot (unity_SHBr, tmpvar_26);
            x1_25.y = dot (unity_SHBg, tmpvar_26);
            x1_25.z = dot (unity_SHBb, tmpvar_26);
            ambient_24 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_25 + (unity_SHC.xyz * 
              ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
            )));
            tmpvar_2 = ambient_24;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = tmpvar_6;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_24;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * tmpvar_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_9;
            lowp vec4 c_10;
            lowp float diff_11;
            mediump float tmpvar_12;
            tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_11 = tmpvar_12;
            c_10.xyz = ((tmpvar_3 * tmpvar_1) * diff_11);
            c_10.w = tmpvar_8.w;
            c_9.w = c_10.w;
            c_9.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_3.xyz * _LightColor0.xyz;
              u_xlat16_3.xyz = u_xlat16_3.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_0) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            tmpvar_9 = (tmpvar_10.xyz * tmpvar_10.w);
            mediump float realtimeShadowAttenuation_11;
            highp vec4 v_12;
            v_12.x = unity_MatrixV[0].z;
            v_12.y = unity_MatrixV[1].z;
            v_12.z = unity_MatrixV[2].z;
            v_12.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_13;
            tmpvar_13 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_14;
            highp float tmpvar_15;
            tmpvar_15 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_14 = tmpvar_15;
            lowp float tmpvar_16;
            highp float lightShadowDataX_17;
            mediump float tmpvar_18;
            tmpvar_18 = _LightShadowData.x;
            lightShadowDataX_17 = tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_17);
            tmpvar_16 = tmpvar_19;
            realtimeShadowAttenuation_11 = tmpvar_16;
            mediump float tmpvar_20;
            tmpvar_20 = mix (realtimeShadowAttenuation_11, 1.0, tmpvar_14);
            atten_4 = tmpvar_20;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_21;
            normalWorld_21 = tmpvar_5;
            mediump vec3 tmpvar_22;
            tmpvar_22 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_23;
            tmpvar_23.w = 1.0;
            tmpvar_23.xyz = normalWorld_21;
            mediump vec3 x_24;
            x_24.x = dot (unity_SHAr, tmpvar_23);
            x_24.y = dot (unity_SHAg, tmpvar_23);
            x_24.z = dot (unity_SHAb, tmpvar_23);
            mediump vec3 tmpvar_25;
            tmpvar_25 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_24)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_22;
            lowp vec4 c_26;
            lowp vec4 c_27;
            lowp float diff_28;
            mediump float tmpvar_29;
            tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_28 = tmpvar_29;
            c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
            c_27.w = tmpvar_10.w;
            c_26.w = c_27.w;
            c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_25));
            gl_FragData[0] = c_26;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
            xlv_TEXCOORD6 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_glesNormal * tmpvar_7));
            mediump vec3 normal_9;
            normal_9 = tmpvar_8;
            mediump vec3 x1_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = (normal_9.xyzz * normal_9.yzzx);
            x1_10.x = dot (unity_SHBr, tmpvar_11);
            x1_10.y = dot (unity_SHBg, tmpvar_11);
            x1_10.z = dot (unity_SHBb, tmpvar_11);
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_8;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (x1_10 + (unity_SHC.xyz * (
              (normal_9.x * normal_9.x)
             - 
              (normal_9.y * normal_9.y)
            )));
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_4));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump float u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat16_2 = u_xlat0.y * u_xlat0.y;
              u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
              u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
              vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            highp vec4 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            tmpvar_8.w = 1.0;
            tmpvar_8.xyz = pos_6.xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = (unity_ObjectToWorld * pos_6).xyz;
            highp mat3 tmpvar_10;
            tmpvar_10[0] = unity_WorldToObject[0].xyz;
            tmpvar_10[1] = unity_WorldToObject[1].xyz;
            tmpvar_10[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_11;
            tmpvar_11 = normalize((_glesNormal * tmpvar_10));
            highp vec3 lightColor0_12;
            lightColor0_12 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_13;
            lightColor1_13 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_14;
            lightColor2_14 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_15;
            lightColor3_15 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_16;
            lightAttenSq_16 = unity_4LightAtten0;
            highp vec3 col_17;
            highp vec4 ndotl_18;
            highp vec4 lengthSq_19;
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosX0 - tmpvar_9.x);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosY0 - tmpvar_9.y);
            highp vec4 tmpvar_22;
            tmpvar_22 = (unity_4LightPosZ0 - tmpvar_9.z);
            lengthSq_19 = (tmpvar_20 * tmpvar_20);
            lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
            lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (lengthSq_19, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_19 = tmpvar_23;
            ndotl_18 = (tmpvar_20 * tmpvar_11.x);
            ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_11.y));
            ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_11.z));
            highp vec4 tmpvar_24;
            tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(tmpvar_23)));
            ndotl_18 = tmpvar_24;
            highp vec4 tmpvar_25;
            tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
              (tmpvar_23 * lightAttenSq_16)
            ))));
            col_17 = (lightColor0_12 * tmpvar_25.x);
            col_17 = (col_17 + (lightColor1_13 * tmpvar_25.y));
            col_17 = (col_17 + (lightColor2_14 * tmpvar_25.z));
            col_17 = (col_17 + (lightColor3_15 * tmpvar_25.w));
            tmpvar_2 = col_17;
            mediump vec3 normal_26;
            normal_26 = tmpvar_11;
            mediump vec3 ambient_27;
            mediump vec4 tmpvar_28;
            tmpvar_28.w = 1.0;
            tmpvar_28.xyz = normal_26;
            mediump vec3 res_29;
            mediump vec3 x_30;
            x_30.x = dot (unity_SHAr, tmpvar_28);
            x_30.y = dot (unity_SHAg, tmpvar_28);
            x_30.z = dot (unity_SHAb, tmpvar_28);
            mediump vec3 x1_31;
            mediump vec4 tmpvar_32;
            tmpvar_32 = (normal_26.xyzz * normal_26.yzzx);
            x1_31.x = dot (unity_SHBr, tmpvar_32);
            x1_31.y = dot (unity_SHBg, tmpvar_32);
            x1_31.z = dot (unity_SHBb, tmpvar_32);
            res_29 = (x_30 + (x1_31 + (unity_SHC.xyz * 
              ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
            )));
            mediump vec3 tmpvar_33;
            tmpvar_33 = max (((1.055 * 
              pow (max (res_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_29 = tmpvar_33;
            ambient_27 = (tmpvar_2 + max (vec3(0.0, 0.0, 0.0), tmpvar_33));
            tmpvar_2 = ambient_27;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_11;
            xlv_TEXCOORD2 = tmpvar_9;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_27;
            xlv_TEXCOORD6 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            tmpvar_3 = (tmpvar_12.xyz * tmpvar_12.w);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            lowp vec4 c_13;
            lowp vec4 c_14;
            lowp float diff_15;
            mediump float tmpvar_16;
            tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_15 = tmpvar_16;
            c_14.xyz = ((tmpvar_3 * tmpvar_1) * diff_15);
            c_14.w = tmpvar_12.w;
            c_13.w = c_14.w;
            c_13.xyz = (c_14.xyz + (tmpvar_3 * xlv_TEXCOORD4));
            gl_FragData[0] = c_13;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              u_xlat1.w = 1.0;
              u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
              u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
              u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
              u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
              u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat1.xyz = log2(u_xlat16_5.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat1.xyz = exp2(u_xlat1.xyz);
              u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          float u_xlat1;
          mediump vec4 u_xlat16_1;
          lowp float u_xlat10_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat1 = u_xlat10_1 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat1 + u_xlat2.w;
              u_xlat16_1 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_4.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_3.xyz = u_xlat16_4.xyz * _LightColor0.xyz;
              u_xlat16_4.xyz = u_xlat16_4.xyz * vs_TEXCOORD4.xyz;
              SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp vec4 unity_4LightPosX0;
          uniform highp vec4 unity_4LightPosY0;
          uniform highp vec4 unity_4LightPosZ0;
          uniform mediump vec4 unity_4LightAtten0;
          uniform mediump vec4 unity_LightColor[8];
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_WorldToShadow[4];
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump vec4 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp vec3 tmpvar_8;
            tmpvar_8 = (unity_ObjectToWorld * pos_5).xyz;
            highp mat3 tmpvar_9;
            tmpvar_9[0] = unity_WorldToObject[0].xyz;
            tmpvar_9[1] = unity_WorldToObject[1].xyz;
            tmpvar_9[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_10;
            tmpvar_10 = normalize((_glesNormal * tmpvar_9));
            highp vec3 lightColor0_11;
            lightColor0_11 = unity_LightColor[0].xyz;
            highp vec3 lightColor1_12;
            lightColor1_12 = unity_LightColor[1].xyz;
            highp vec3 lightColor2_13;
            lightColor2_13 = unity_LightColor[2].xyz;
            highp vec3 lightColor3_14;
            lightColor3_14 = unity_LightColor[3].xyz;
            highp vec4 lightAttenSq_15;
            lightAttenSq_15 = unity_4LightAtten0;
            highp vec3 col_16;
            highp vec4 ndotl_17;
            highp vec4 lengthSq_18;
            highp vec4 tmpvar_19;
            tmpvar_19 = (unity_4LightPosX0 - tmpvar_8.x);
            highp vec4 tmpvar_20;
            tmpvar_20 = (unity_4LightPosY0 - tmpvar_8.y);
            highp vec4 tmpvar_21;
            tmpvar_21 = (unity_4LightPosZ0 - tmpvar_8.z);
            lengthSq_18 = (tmpvar_19 * tmpvar_19);
            lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
            lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
            highp vec4 tmpvar_22;
            tmpvar_22 = max (lengthSq_18, vec4(1e-6, 1e-6, 1e-6, 1e-6));
            lengthSq_18 = tmpvar_22;
            ndotl_17 = (tmpvar_19 * tmpvar_10.x);
            ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_10.y));
            ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_10.z));
            highp vec4 tmpvar_23;
            tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
            ndotl_17 = tmpvar_23;
            highp vec4 tmpvar_24;
            tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
              (tmpvar_22 * lightAttenSq_15)
            ))));
            col_16 = (lightColor0_11 * tmpvar_24.x);
            col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
            col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
            col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
            tmpvar_2 = col_16;
            mediump vec3 normal_25;
            normal_25 = tmpvar_10;
            mediump vec3 ambient_26;
            mediump vec3 x1_27;
            mediump vec4 tmpvar_28;
            tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
            x1_27.x = dot (unity_SHBr, tmpvar_28);
            x1_27.y = dot (unity_SHBg, tmpvar_28);
            x1_27.z = dot (unity_SHBb, tmpvar_28);
            ambient_26 = ((tmpvar_2 * (
              (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
             + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
              ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
            )));
            tmpvar_2 = ambient_26;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_10;
            xlv_TEXCOORD2 = tmpvar_8;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = ambient_26;
            xlv_TEXCOORD6 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * pos_5));
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec3 _WorldSpaceCameraPos;
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 _LightShadowData;
          uniform highp vec4 unity_ShadowFadeCenterAndType;
          uniform highp mat4 unity_MatrixV;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _ShadowMapTexture;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD6;
          void main ()
          {
            mediump float tmpvar_1;
            mediump vec3 tmpvar_2;
            mediump vec3 tmpvar_3;
            lowp float atten_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_8;
            tmpvar_8 = _WorldSpaceLightPos0.xyz;
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_9;
            lowp vec4 color_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_10.xyz = tmpvar_11.xyz;
            lowp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_13;
            tmpvar_13 = mix (tmpvar_11.w, tmpvar_12.x, _EnableExternalAlpha);
            color_10.w = tmpvar_13;
            lowp vec4 tmpvar_14;
            tmpvar_14 = (color_10 * tmpvar_7);
            tmpvar_9 = (tmpvar_14.xyz * tmpvar_14.w);
            mediump float realtimeShadowAttenuation_15;
            highp vec4 v_16;
            v_16.x = unity_MatrixV[0].z;
            v_16.y = unity_MatrixV[1].z;
            v_16.z = unity_MatrixV[2].z;
            v_16.w = unity_MatrixV[3].z;
            highp vec3 tmpvar_17;
            tmpvar_17 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
            mediump float tmpvar_18;
            highp float tmpvar_19;
            tmpvar_19 = clamp (((
              mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_16.xyz), sqrt(dot (tmpvar_17, tmpvar_17)), unity_ShadowFadeCenterAndType.w)
             * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
            tmpvar_18 = tmpvar_19;
            lowp float tmpvar_20;
            highp float lightShadowDataX_21;
            mediump float tmpvar_22;
            tmpvar_22 = _LightShadowData.x;
            lightShadowDataX_21 = tmpvar_22;
            highp float tmpvar_23;
            tmpvar_23 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD6.xy).x > xlv_TEXCOORD6.z)), lightShadowDataX_21);
            tmpvar_20 = tmpvar_23;
            realtimeShadowAttenuation_15 = tmpvar_20;
            mediump float tmpvar_24;
            tmpvar_24 = mix (realtimeShadowAttenuation_15, 1.0, tmpvar_18);
            atten_4 = tmpvar_24;
            tmpvar_2 = _LightColor0.xyz;
            tmpvar_3 = lightDir_6;
            tmpvar_1 = atten_4;
            mediump vec3 normalWorld_25;
            normalWorld_25 = tmpvar_5;
            mediump vec3 tmpvar_26;
            tmpvar_26 = (tmpvar_2 * tmpvar_1);
            mediump vec4 tmpvar_27;
            tmpvar_27.w = 1.0;
            tmpvar_27.xyz = normalWorld_25;
            mediump vec3 x_28;
            x_28.x = dot (unity_SHAr, tmpvar_27);
            x_28.y = dot (unity_SHAg, tmpvar_27);
            x_28.z = dot (unity_SHAb, tmpvar_27);
            mediump vec3 tmpvar_29;
            tmpvar_29 = max (((1.055 * 
              pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_28)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            tmpvar_2 = tmpvar_26;
            lowp vec4 c_30;
            lowp vec4 c_31;
            lowp float diff_32;
            mediump float tmpvar_33;
            tmpvar_33 = max (0.0, dot (tmpvar_5, tmpvar_3));
            diff_32 = tmpvar_33;
            c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
            c_31.w = tmpvar_14.w;
            c_30.w = c_31.w;
            c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_29));
            gl_FragData[0] = c_30;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 unity_4LightPosX0;
          uniform 	vec4 unity_4LightPosY0;
          uniform 	vec4 unity_4LightPosZ0;
          uniform 	mediump vec4 unity_4LightAtten0;
          uniform 	mediump vec4 unity_LightColor[8];
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out mediump vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec4 u_xlat16_2;
          vec4 u_xlat3;
          vec4 u_xlat4;
          mediump vec3 u_xlat16_5;
          mediump vec3 u_xlat16_6;
          vec2 u_xlat14;
          float u_xlat21;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat14.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat14.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat14.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat21 = inversesqrt(u_xlat21);
              u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
              vs_TEXCOORD1.xyz = u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_2 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_2 * _RendererColor;
              u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
              u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
              u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
              u_xlat4 = u_xlat1.yyyy * u_xlat3;
              u_xlat3 = u_xlat3 * u_xlat3;
              u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
              u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
              u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
              u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
              u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
              u_xlat3 = inversesqrt(u_xlat0);
              u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
              u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
              u_xlat2 = u_xlat2 * u_xlat3;
              u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
              u_xlat0 = u_xlat0 * u_xlat2;
              u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
              u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
              u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
              u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
              u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
              u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
              u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
              u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
              u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
              vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_5.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          #ifdef GL_EXT_shader_texture_lod
          #extension GL_EXT_shader_texture_lod : enable
          #endif
          
          precision highp int;
          uniform 	vec3 _WorldSpaceCameraPos;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
          uniform 	mediump vec4 _LightShadowData;
          uniform 	vec4 unity_ShadowFadeCenterAndType;
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
          uniform lowp sampler2D _ShadowMapTexture;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD4;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec3 u_xlat5;
          lowp float u_xlat10_5;
          mediump float u_xlat16_7;
          mediump float u_xlat16_17;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = sqrt(u_xlat0.x);
              u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
              u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
              u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
              u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
              u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
              u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
              u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
              u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
          #ifdef UNITY_ADRENO_ES3
              u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
          #else
              u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
          #endif
              u_xlat5.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
              u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
              u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
              vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
              u_xlat10_5 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
              u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
              u_xlat16_2.x = u_xlat10_5 * u_xlat16_2.x + _LightShadowData.x;
              u_xlat16_7 = (-u_xlat16_2.x) + 1.0;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat0.xyz = vs_TEXCOORD1.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
              u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
              u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_17 = max(u_xlat16_17, 0.0);
              SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 2, name: FORWARD
    {
      Name "FORWARD"
      Tags
      { 
        "CanUseSpriteAtlas" = "true"
        "IGNOREPROJECTOR" = "true"
        "LIGHTMODE" = "FORWARDADD"
        "PreviewType" = "Plane"
        "QUEUE" = "Transparent"
        "RenderType" = "Transparent"
      }
      ZWrite Off
      Cull Off
      Blend One One
      GpuProgramID 106259
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_6));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * tmpvar_4)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_7);
            highp vec4 tmpvar_10;
            tmpvar_10.w = 1.0;
            tmpvar_10.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_10).xyz;
            highp float tmpvar_11;
            tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_11;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_9.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_7;
            tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_8;
            lowp vec4 c_9;
            lowp float diff_10;
            mediump float tmpvar_11;
            tmpvar_11 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_10 = tmpvar_11;
            c_9.xyz = ((tmpvar_7.xyz * tmpvar_7.w) * (tmpvar_1 * diff_10));
            c_9.w = tmpvar_7.w;
            c_8.w = c_9.w;
            c_8.xyz = c_9.xyz;
            gl_FragData[0] = c_8;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          mediump float u_xlat16_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_0 = max(u_xlat16_0, 0.0);
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            lowp float tmpvar_9;
            highp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_9 = tmpvar_10.w;
            lowp float tmpvar_11;
            highp vec4 tmpvar_12;
            tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_11 = tmpvar_12.x;
            highp float tmpvar_13;
            tmpvar_13 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_9) * tmpvar_11);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_8.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          vec3 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump float u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat3;
          mediump vec3 u_xlat16_4;
          float u_xlat9;
          void main()
          {
              u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat9 = inversesqrt(u_xlat9);
              u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
              u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
              u_xlat16_1 = max(u_xlat16_1, 0.0);
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat3 = texture(_LightTextureB0, vec2(u_xlat9)).x;
              u_xlat0.x = u_xlat0.x * u_xlat3;
              u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
              SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_4.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_6);
            highp float tmpvar_9;
            tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_9;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_10;
            lowp vec4 c_11;
            lowp float diff_12;
            mediump float tmpvar_13;
            tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_12 = tmpvar_13;
            c_11.xyz = ((tmpvar_8.xyz * tmpvar_8.w) * (tmpvar_1 * diff_12));
            c_11.w = tmpvar_8.w;
            c_10.w = c_11.w;
            c_10.xyz = c_11.xyz;
            gl_FragData[0] = c_10;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform lowp sampler2D _MainTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_10;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
              u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_10 = max(u_xlat16_10, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp mat4 unity_WorldToLight;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            highp vec3 lightCoord_4;
            lowp vec3 tmpvar_5;
            lowp vec3 lightDir_6;
            lowp vec4 tmpvar_7;
            tmpvar_7 = xlv_TEXCOORD3;
            highp vec3 tmpvar_8;
            tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_6 = tmpvar_8;
            tmpvar_5 = xlv_TEXCOORD1;
            lowp vec4 color_9;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_9.xyz = tmpvar_10.xyz;
            lowp vec4 tmpvar_11;
            tmpvar_11 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_12;
            tmpvar_12 = mix (tmpvar_10.w, tmpvar_11.x, _EnableExternalAlpha);
            color_9.w = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13 = (color_9 * tmpvar_7);
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = xlv_TEXCOORD2;
            lightCoord_4 = (unity_WorldToLight * tmpvar_14).xyz;
            highp float tmpvar_15;
            tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).x;
            atten_3 = tmpvar_15;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_6;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_16;
            lowp vec4 c_17;
            lowp float diff_18;
            mediump float tmpvar_19;
            tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_2));
            diff_18 = tmpvar_19;
            c_17.xyz = ((tmpvar_13.xyz * tmpvar_13.w) * (tmpvar_1 * diff_18));
            c_17.w = tmpvar_13.w;
            c_16.w = c_17.w;
            c_16.xyz = c_17.xyz;
            gl_FragData[0] = c_16;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp vec3 tmpvar_3;
            lowp vec3 lightDir_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_6;
            tmpvar_6 = _WorldSpaceLightPos0.xyz;
            lightDir_4 = tmpvar_6;
            tmpvar_3 = xlv_TEXCOORD1;
            lowp vec4 color_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_7.xyz = tmpvar_8.xyz;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_10;
            tmpvar_10 = mix (tmpvar_8.w, tmpvar_9.x, _EnableExternalAlpha);
            color_7.w = tmpvar_10;
            lowp vec4 tmpvar_11;
            tmpvar_11 = (color_7 * tmpvar_5);
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_4;
            lowp vec4 c_12;
            lowp vec4 c_13;
            lowp float diff_14;
            mediump float tmpvar_15;
            tmpvar_15 = max (0.0, dot (tmpvar_3, tmpvar_2));
            diff_14 = tmpvar_15;
            c_13.xyz = ((tmpvar_11.xyz * tmpvar_11.w) * (tmpvar_1 * diff_14));
            c_13.w = tmpvar_11.w;
            c_12.w = c_13.w;
            c_12.xyz = c_13.xyz;
            gl_FragData[0] = c_12;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          float u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          mediump float u_xlat16_11;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0 = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
              u_xlat16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_11 = max(u_xlat16_11, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5));
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            lowp float tmpvar_13;
            highp vec4 tmpvar_14;
            tmpvar_14 = texture2D (_LightTexture0, ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5));
            tmpvar_13 = tmpvar_14.w;
            lowp float tmpvar_15;
            highp vec4 tmpvar_16;
            tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz)));
            tmpvar_15 = tmpvar_16.x;
            highp float tmpvar_17;
            tmpvar_17 = ((float(
              (xlv_TEXCOORD4.z > 0.0)
            ) * tmpvar_13) * tmpvar_15);
            atten_3 = tmpvar_17;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_18;
            lowp vec4 c_19;
            lowp float diff_20;
            mediump float tmpvar_21;
            tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_20 = tmpvar_21;
            c_19.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_20));
            c_19.w = tmpvar_12.w;
            c_18.w = c_19.w;
            c_18.xyz = c_19.xyz;
            gl_FragData[0] = c_18;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec2 u_xlat4;
          float u_xlat7;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat7 = inversesqrt(u_xlat7);
              vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
              vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          bool u_xlatb1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          float u_xlat13;
          mediump float u_xlat16_14;
          void main()
          {
              u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
              u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
              u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
              u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
              u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
          #ifdef UNITY_ADRENO_ES3
              u_xlatb1 = !!(0.0<u_xlat0.z);
          #else
              u_xlatb1 = 0.0<u_xlat0.z;
          #endif
              u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
              u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
              u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
              u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
              u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
              u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat13 = inversesqrt(u_xlat13);
              u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
              u_xlat16_14 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
              u_xlat16_14 = max(u_xlat16_14, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xyz;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp samplerCube _LightTexture0;
          uniform highp sampler2D _LightTextureB0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD4, xlv_TEXCOORD4))).x * textureCube (_LightTexture0, xlv_TEXCOORD4).w);
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec3 vs_TEXCOORD4;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec3 u_xlat2;
          vec2 u_xlat6;
          float u_xlat10;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat6.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat6.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat6.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat10 = inversesqrt(u_xlat10);
              vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
              vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTextureB0;
          uniform highp samplerCube _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          float u_xlat4;
          float u_xlat12;
          mediump float u_xlat16_13;
          float u_xlat14;
          void main()
          {
              u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
              u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
              u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
              u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
              u_xlat0.x = u_xlat0.x * u_xlat4;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
              u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
              u_xlat14 = inversesqrt(u_xlat14);
              u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform highp mat4 unity_WorldToLight;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          varying highp vec4 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_8));
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = (unity_WorldToLight * (unity_ObjectToWorld * pos_5)).xy;
            xlv_TEXCOORD5 = tmpvar_2;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform mediump vec4 _WorldSpaceLightPos0;
          uniform lowp vec4 _LightColor0;
          uniform highp sampler2D _LightTexture0;
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec2 xlv_TEXCOORD4;
          void main ()
          {
            mediump vec3 tmpvar_1;
            mediump vec3 tmpvar_2;
            lowp float atten_3;
            lowp vec3 tmpvar_4;
            lowp vec3 lightDir_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = xlv_TEXCOORD3;
            mediump vec3 tmpvar_7;
            tmpvar_7 = _WorldSpaceLightPos0.xyz;
            lightDir_5 = tmpvar_7;
            tmpvar_4 = xlv_TEXCOORD1;
            lowp vec4 color_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_8.xyz = tmpvar_9.xyz;
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_11;
            tmpvar_11 = mix (tmpvar_9.w, tmpvar_10.x, _EnableExternalAlpha);
            color_8.w = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12 = (color_8 * tmpvar_6);
            highp float tmpvar_13;
            tmpvar_13 = texture2D (_LightTexture0, xlv_TEXCOORD4).w;
            atten_3 = tmpvar_13;
            tmpvar_1 = _LightColor0.xyz;
            tmpvar_2 = lightDir_5;
            tmpvar_1 = (tmpvar_1 * atten_3);
            lowp vec4 c_14;
            lowp vec4 c_15;
            lowp float diff_16;
            mediump float tmpvar_17;
            tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
            diff_16 = tmpvar_17;
            c_15.xyz = ((tmpvar_12.xyz * tmpvar_12.w) * (tmpvar_1 * diff_16));
            c_15.w = tmpvar_12.w;
            c_14.w = c_15.w;
            c_14.xyz = c_15.xyz;
            gl_FragData[0] = c_14;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec2 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
              u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
              vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_0 * _RendererColor;
              vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	mediump vec4 _WorldSpaceLightPos0;
          uniform 	mediump vec4 _LightColor0;
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform highp sampler2D _LightTexture0;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in highp vec3 vs_TEXCOORD2;
          in mediump vec4 vs_TEXCOORD3;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec2 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          mediump vec3 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump float u_xlat16_13;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
              u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
              u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
              u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
              u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat2.w);
              u_xlat2.w = _EnableExternalAlpha * u_xlat0.x + u_xlat2.w;
              u_xlat16_0 = u_xlat2 * vs_TEXCOORD3;
              u_xlat16_3.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.w = u_xlat16_0.w;
              u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
              u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
              u_xlat16_13 = max(u_xlat16_13, 0.0);
              SV_Target0.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "SPOT" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "POINT_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "DIRECTIONAL_COOKIE" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 3, name: PREPASS
    {
      Name "PREPASS"
      Tags
      { 
        "CanUseSpriteAtlas" = "true"
        "IGNOREPROJECTOR" = "true"
        "LIGHTMODE" = "PREPASSBASE"
        "PreviewType" = "Plane"
        "QUEUE" = "Transparent"
        "RenderType" = "Transparent"
      }
      ZWrite Off
      Cull Off
      Blend One OneMinusSrcAlpha
      GpuProgramID 178764
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xyz = tmpvar_3.xyz;
            highp mat3 tmpvar_5;
            tmpvar_5[0] = unity_WorldToObject[0].xyz;
            tmpvar_5[1] = unity_WorldToObject[1].xyz;
            tmpvar_5[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_5));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_3).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          uniform highp vec4 _ScreenParams;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          varying highp vec3 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          void main ()
          {
            mediump vec4 tmpvar_1;
            lowp vec4 tmpvar_2;
            highp vec4 tmpvar_3;
            tmpvar_3.w = 1.0;
            tmpvar_3.xy = (_glesVertex.xy * _Flip);
            tmpvar_3.z = _glesVertex.z;
            highp vec4 pos_4;
            pos_4.zw = tmpvar_3.zw;
            highp vec2 tmpvar_5;
            tmpvar_5 = (_ScreenParams.xy * 0.5);
            pos_4.xy = (floor((
              (tmpvar_3.xy * tmpvar_5)
             + vec2(0.5, 0.5))) / tmpvar_5);
            tmpvar_2 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_2;
            highp vec4 tmpvar_6;
            tmpvar_6.w = 1.0;
            tmpvar_6.xyz = pos_4.xyz;
            highp mat3 tmpvar_7;
            tmpvar_7[0] = unity_WorldToObject[0].xyz;
            tmpvar_7[1] = unity_WorldToObject[1].xyz;
            tmpvar_7[2] = unity_WorldToObject[2].xyz;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
            xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_7));
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_4).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
          }
          
          
          #endif
          #ifdef FRAGMENT
          varying highp vec3 xlv_TEXCOORD0;
          void main ()
          {
            lowp vec4 res_1;
            lowp vec3 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD0;
            res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
            res_1.w = 0.0;
            gl_FragData[0] = res_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in mediump vec4 in_COLOR0;
          out highp vec3 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          vec2 u_xlat4;
          float u_xlat6;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat4.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat4.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat4.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat6 = inversesqrt(u_xlat6);
              vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          in highp vec3 vs_TEXCOORD0;
          layout(location = 0) out mediump vec4 SV_Target0;
          void main()
          {
              SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              SV_Target0.w = 0.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 4, name: PREPASS
    {
      Name "PREPASS"
      Tags
      { 
        "CanUseSpriteAtlas" = "true"
        "IGNOREPROJECTOR" = "true"
        "LIGHTMODE" = "PREPASSFINAL"
        "PreviewType" = "Plane"
        "QUEUE" = "Transparent"
        "RenderType" = "Transparent"
      }
      ZWrite Off
      Cull Off
      Blend One OneMinusSrcAlpha
      GpuProgramID 230524
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_6;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = tmpvar_5.xyz;
            tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            highp vec4 o_8;
            highp vec4 tmpvar_9;
            tmpvar_9 = (tmpvar_6 * 0.5);
            highp vec2 tmpvar_10;
            tmpvar_10.x = tmpvar_9.x;
            tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
            o_8.xy = (tmpvar_10 + tmpvar_9.w);
            o_8.zw = tmpvar_6.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_11;
            tmpvar_11[0] = unity_WorldToObject[0].xyz;
            tmpvar_11[1] = unity_WorldToObject[1].xyz;
            tmpvar_11[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = normalize((_glesNormal * tmpvar_11));
            mediump vec4 normal_13;
            normal_13 = tmpvar_12;
            mediump vec3 res_14;
            mediump vec3 x_15;
            x_15.x = dot (unity_SHAr, normal_13);
            x_15.y = dot (unity_SHAg, normal_13);
            x_15.z = dot (unity_SHAb, normal_13);
            mediump vec3 x1_16;
            mediump vec4 tmpvar_17;
            tmpvar_17 = (normal_13.xyzz * normal_13.yzzx);
            x1_16.x = dot (unity_SHBr, tmpvar_17);
            x1_16.y = dot (unity_SHBg, tmpvar_17);
            x1_16.z = dot (unity_SHBb, tmpvar_17);
            res_14 = (x_15 + (x1_16 + (unity_SHC.xyz * 
              ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
            )));
            mediump vec3 tmpvar_18;
            tmpvar_18 = max (((1.055 * 
              pow (max (res_14, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_14 = tmpvar_18;
            tmpvar_3 = tmpvar_18;
            gl_Position = tmpvar_6;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * tmpvar_5).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_8;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_7;
            c_7.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_7.w = tmpvar_5.w;
            c_2 = c_7;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform sampler2D _MainTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_4);
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_6;
            mediump vec4 tmpvar_7;
            tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_7.w;
            light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD5);
            lowp vec4 c_8;
            c_8.xyz = ((tmpvar_5.xyz * tmpvar_5.w) * light_3.xyz);
            c_8.w = tmpvar_5.w;
            c_2 = c_8;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          mediump vec4 u_xlat16_1;
          lowp vec4 u_xlat10_1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_1 = u_xlat10_1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
            light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
            lowp vec4 c_11;
            c_11.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_11.w = tmpvar_9.w;
            c_2 = c_11;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
              u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ProjectionParams;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            highp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xy = (_glesVertex.xy * _Flip);
            tmpvar_5.z = _glesVertex.z;
            highp vec4 pos_6;
            pos_6.zw = tmpvar_5.zw;
            highp vec2 tmpvar_7;
            tmpvar_7 = (_ScreenParams.xy * 0.5);
            pos_6.xy = (floor((
              (tmpvar_5.xy * tmpvar_7)
             + vec2(0.5, 0.5))) / tmpvar_7);
            tmpvar_4 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_4;
            highp vec4 tmpvar_8;
            highp vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = pos_6.xyz;
            tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
            highp vec4 o_10;
            highp vec4 tmpvar_11;
            tmpvar_11 = (tmpvar_8 * 0.5);
            highp vec2 tmpvar_12;
            tmpvar_12.x = tmpvar_11.x;
            tmpvar_12.y = (tmpvar_11.y * _ProjectionParams.x);
            o_10.xy = (tmpvar_12 + tmpvar_11.w);
            o_10.zw = tmpvar_8.zw;
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            highp mat3 tmpvar_13;
            tmpvar_13[0] = unity_WorldToObject[0].xyz;
            tmpvar_13[1] = unity_WorldToObject[1].xyz;
            tmpvar_13[2] = unity_WorldToObject[2].xyz;
            highp vec4 tmpvar_14;
            tmpvar_14.w = 1.0;
            tmpvar_14.xyz = normalize((_glesNormal * tmpvar_13));
            mediump vec4 normal_15;
            normal_15 = tmpvar_14;
            mediump vec3 res_16;
            mediump vec3 x_17;
            x_17.x = dot (unity_SHAr, normal_15);
            x_17.y = dot (unity_SHAg, normal_15);
            x_17.z = dot (unity_SHAb, normal_15);
            mediump vec3 x1_18;
            mediump vec4 tmpvar_19;
            tmpvar_19 = (normal_15.xyzz * normal_15.yzzx);
            x1_18.x = dot (unity_SHBr, tmpvar_19);
            x1_18.y = dot (unity_SHBg, tmpvar_19);
            x1_18.z = dot (unity_SHBb, tmpvar_19);
            res_16 = (x_17 + (x1_18 + (unity_SHC.xyz * 
              ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
            )));
            mediump vec3 tmpvar_20;
            tmpvar_20 = max (((1.055 * 
              pow (max (res_16, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_16 = tmpvar_20;
            tmpvar_3 = tmpvar_20;
            gl_Position = tmpvar_8;
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = (unity_ObjectToWorld * pos_6).xyz;
            xlv_TEXCOORD2 = tmpvar_1;
            xlv_TEXCOORD3 = o_10;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = tmpvar_3;
          }
          
          
          #endif
          #ifdef FRAGMENT
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          uniform sampler2D _LightBuffer;
          varying highp vec2 xlv_TEXCOORD0;
          varying mediump vec4 xlv_TEXCOORD2;
          varying highp vec4 xlv_TEXCOORD3;
          varying highp vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec4 tmpvar_1;
            mediump vec4 c_2;
            mediump vec4 light_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = xlv_TEXCOORD2;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_4);
            lowp vec4 tmpvar_10;
            tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
            light_3 = tmpvar_10;
            mediump vec4 tmpvar_11;
            tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
            light_3.w = tmpvar_11.w;
            light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
            lowp vec4 c_12;
            c_12.xyz = ((tmpvar_9.xyz * tmpvar_9.w) * light_3.xyz);
            c_12.w = tmpvar_9.w;
            c_2 = c_12;
            tmpvar_1 = c_2;
            gl_FragData[0] = tmpvar_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ProjectionParams;
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out mediump vec4 vs_TEXCOORD2;
          out highp vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out highp vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          vec4 u_xlat2;
          mediump vec3 u_xlat16_3;
          mediump vec3 u_xlat16_4;
          vec2 u_xlat10;
          float u_xlat16;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat10.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat10.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat10.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              gl_Position = u_xlat1;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat16_0 = in_COLOR0 * _Color;
              vs_TEXCOORD2 = u_xlat16_0 * _RendererColor;
              u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
              u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
              vs_TEXCOORD3.zw = u_xlat1.zw;
              vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
              u_xlat16 = inversesqrt(u_xlat16);
              u_xlat0.xyz = vec3(u_xlat16) * u_xlat1.xyz;
              u_xlat16_3.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_3.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_3.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_4.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_4.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_4.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
              u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat2.xyz = log2(u_xlat16_3.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat2.xyz = exp2(u_xlat2.xyz);
              u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          uniform lowp sampler2D _LightBuffer;
          in highp vec2 vs_TEXCOORD0;
          in mediump vec4 vs_TEXCOORD2;
          in highp vec4 vs_TEXCOORD3;
          in highp vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          vec3 u_xlat0;
          lowp vec3 u_xlat10_0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          float u_xlat9;
          lowp float u_xlat10_9;
          void main()
          {
              u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
              u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
              u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
              u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD5.xyz;
              u_xlat10_9 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat9 = u_xlat10_9 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat9 + u_xlat1.w;
              u_xlat16_1 = u_xlat1 * vs_TEXCOORD2;
              u_xlat16_2.xyz = u_xlat16_1.www * u_xlat16_1.xyz;
              SV_Target0.w = u_xlat16_1.w;
              SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
    Pass // ind: 5, name: DEFERRED
    {
      Name "DEFERRED"
      Tags
      { 
        "CanUseSpriteAtlas" = "true"
        "IGNOREPROJECTOR" = "true"
        "LIGHTMODE" = "DEFERRED"
        "PreviewType" = "Plane"
        "QUEUE" = "Transparent"
        "RenderType" = "Transparent"
      }
      ZWrite Off
      Cull Off
      Blend One OneMinusSrcAlpha
      GpuProgramID 292492
      // m_ProgramMask = 6
      !!! *******************************************************************************************
      !!! Allow restore shader as UnityLab format - only available for DevX GameRecovery license type
      !!! *******************************************************************************************
      Program "vp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_5;
            tmpvar_5.w = 1.0;
            tmpvar_5.xyz = tmpvar_4.xyz;
            highp mat3 tmpvar_6;
            tmpvar_6[0] = unity_WorldToObject[0].xyz;
            tmpvar_6[1] = unity_WorldToObject[1].xyz;
            tmpvar_6[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_7;
            tmpvar_7 = normalize((_glesNormal * tmpvar_6));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_8;
            normal_8 = tmpvar_7;
            mediump vec4 tmpvar_9;
            tmpvar_9.w = 1.0;
            tmpvar_9.xyz = normal_8;
            mediump vec3 res_10;
            mediump vec3 x_11;
            x_11.x = dot (unity_SHAr, tmpvar_9);
            x_11.y = dot (unity_SHAg, tmpvar_9);
            x_11.z = dot (unity_SHAb, tmpvar_9);
            mediump vec3 x1_12;
            mediump vec4 tmpvar_13;
            tmpvar_13 = (normal_8.xyzz * normal_8.yzzx);
            x1_12.x = dot (unity_SHBr, tmpvar_13);
            x1_12.y = dot (unity_SHBg, tmpvar_13);
            x1_12.z = dot (unity_SHBb, tmpvar_13);
            res_10 = (x_11 + (x1_12 + (unity_SHC.xyz * 
              ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
            )));
            mediump vec3 tmpvar_14;
            tmpvar_14 = max (((1.055 * 
              pow (max (res_10, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_10 = tmpvar_14;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_7;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * tmpvar_4).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_14);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_3);
            tmpvar_4 = (tmpvar_5.xyz * tmpvar_5.w);
            mediump vec4 emission_6;
            mediump vec3 tmpvar_7;
            highp vec3 tmpvar_8;
            tmpvar_7 = tmpvar_4;
            tmpvar_8 = tmpvar_2;
            mediump vec4 outGBuffer2_9;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = tmpvar_7;
            tmpvar_10.w = 1.0;
            mediump vec4 tmpvar_11;
            tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_11.w = 0.0;
            highp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = ((tmpvar_8 * 0.5) + 0.5);
            outGBuffer2_9 = tmpvar_12;
            lowp vec4 tmpvar_13;
            tmpvar_13.w = 1.0;
            tmpvar_13.xyz = vec3(0.0, 0.0, 0.0);
            emission_6 = tmpvar_13;
            emission_6.xyz = (emission_6.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_6.w;
            outEmission_1.xyz = exp2(-(emission_6.xyz));
            gl_FragData[0] = tmpvar_10;
            gl_FragData[1] = tmpvar_11;
            gl_FragData[2] = outGBuffer2_9;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              u_xlat16_1.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform sampler2D _MainTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 tmpvar_4;
            tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * tmpvar_2);
            tmpvar_3 = (tmpvar_4.xyz * tmpvar_4.w);
            mediump vec4 emission_5;
            mediump vec3 tmpvar_6;
            highp vec3 tmpvar_7;
            tmpvar_6 = tmpvar_3;
            tmpvar_7 = tmpvar_1;
            mediump vec4 outGBuffer2_8;
            mediump vec4 tmpvar_9;
            tmpvar_9.xyz = tmpvar_6;
            tmpvar_9.w = 1.0;
            mediump vec4 tmpvar_10;
            tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_10.w = 0.0;
            highp vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = ((tmpvar_7 * 0.5) + 0.5);
            outGBuffer2_8 = tmpvar_11;
            lowp vec4 tmpvar_12;
            tmpvar_12.w = 1.0;
            tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
            emission_5 = tmpvar_12;
            emission_5.xyz = (emission_5.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_9;
            gl_FragData[1] = tmpvar_10;
            gl_FragData[2] = outGBuffer2_8;
            gl_FragData[3] = emission_5;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform lowp sampler2D _MainTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp vec4 u_xlat10_0;
          mediump vec3 u_xlat16_1;
          void main()
          {
              u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat16_0 = u_xlat10_0 * vs_TEXCOORD3;
              u_xlat16_1.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_1.xyz;
              SV_Target3.xyz = u_xlat16_1.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 outEmission_1;
            lowp vec3 tmpvar_2;
            lowp vec4 tmpvar_3;
            tmpvar_3 = xlv_TEXCOORD3;
            tmpvar_2 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_4;
            lowp vec4 color_5;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_5.xyz = tmpvar_6.xyz;
            lowp vec4 tmpvar_7;
            tmpvar_7 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_8;
            tmpvar_8 = mix (tmpvar_6.w, tmpvar_7.x, _EnableExternalAlpha);
            color_5.w = tmpvar_8;
            lowp vec4 tmpvar_9;
            tmpvar_9 = (color_5 * tmpvar_3);
            tmpvar_4 = (tmpvar_9.xyz * tmpvar_9.w);
            mediump vec4 emission_10;
            mediump vec3 tmpvar_11;
            highp vec3 tmpvar_12;
            tmpvar_11 = tmpvar_4;
            tmpvar_12 = tmpvar_2;
            mediump vec4 outGBuffer2_13;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = tmpvar_11;
            tmpvar_14.w = 1.0;
            mediump vec4 tmpvar_15;
            tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_15.w = 0.0;
            highp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = ((tmpvar_12 * 0.5) + 0.5);
            outGBuffer2_13 = tmpvar_16;
            lowp vec4 tmpvar_17;
            tmpvar_17.w = 1.0;
            tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
            emission_10 = tmpvar_17;
            emission_10.xyz = (emission_10.xyz + (tmpvar_4 * xlv_TEXCOORD5));
            outEmission_1.w = emission_10.w;
            outEmission_1.xyz = exp2(-(emission_10.xyz));
            gl_FragData[0] = tmpvar_14;
            gl_FragData[1] = tmpvar_15;
            gl_FragData[2] = outGBuffer2_13;
            gl_FragData[3] = outEmission_1;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              u_xlat16_2.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target3.xyz = exp2((-u_xlat16_2.xyz));
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          #version 100
          
          #ifdef VERTEX
          attribute vec4 _glesVertex;
          attribute vec4 _glesColor;
          attribute vec3 _glesNormal;
          attribute vec4 _glesMultiTexCoord0;
          uniform highp vec4 _ScreenParams;
          uniform mediump vec4 unity_SHAr;
          uniform mediump vec4 unity_SHAg;
          uniform mediump vec4 unity_SHAb;
          uniform mediump vec4 unity_SHBr;
          uniform mediump vec4 unity_SHBg;
          uniform mediump vec4 unity_SHBb;
          uniform mediump vec4 unity_SHC;
          uniform highp mat4 unity_ObjectToWorld;
          uniform highp mat4 unity_WorldToObject;
          uniform highp mat4 unity_MatrixVP;
          uniform lowp vec4 _RendererColor;
          uniform lowp vec2 _Flip;
          uniform lowp vec4 _Color;
          uniform highp vec4 _MainTex_ST;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying highp vec3 xlv_TEXCOORD2;
          varying mediump vec4 xlv_TEXCOORD3;
          varying highp vec4 xlv_TEXCOORD4;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            mediump vec4 tmpvar_1;
            highp vec4 tmpvar_2;
            lowp vec4 tmpvar_3;
            highp vec4 tmpvar_4;
            tmpvar_4.w = 1.0;
            tmpvar_4.xy = (_glesVertex.xy * _Flip);
            tmpvar_4.z = _glesVertex.z;
            highp vec4 pos_5;
            pos_5.zw = tmpvar_4.zw;
            highp vec2 tmpvar_6;
            tmpvar_6 = (_ScreenParams.xy * 0.5);
            pos_5.xy = (floor((
              (tmpvar_4.xy * tmpvar_6)
             + vec2(0.5, 0.5))) / tmpvar_6);
            tmpvar_3 = ((_glesColor * _Color) * _RendererColor);
            tmpvar_1 = tmpvar_3;
            highp vec4 tmpvar_7;
            tmpvar_7.w = 1.0;
            tmpvar_7.xyz = pos_5.xyz;
            highp mat3 tmpvar_8;
            tmpvar_8[0] = unity_WorldToObject[0].xyz;
            tmpvar_8[1] = unity_WorldToObject[1].xyz;
            tmpvar_8[2] = unity_WorldToObject[2].xyz;
            highp vec3 tmpvar_9;
            tmpvar_9 = normalize((_glesNormal * tmpvar_8));
            tmpvar_2.zw = vec2(0.0, 0.0);
            tmpvar_2.xy = vec2(0.0, 0.0);
            mediump vec3 normal_10;
            normal_10 = tmpvar_9;
            mediump vec4 tmpvar_11;
            tmpvar_11.w = 1.0;
            tmpvar_11.xyz = normal_10;
            mediump vec3 res_12;
            mediump vec3 x_13;
            x_13.x = dot (unity_SHAr, tmpvar_11);
            x_13.y = dot (unity_SHAg, tmpvar_11);
            x_13.z = dot (unity_SHAb, tmpvar_11);
            mediump vec3 x1_14;
            mediump vec4 tmpvar_15;
            tmpvar_15 = (normal_10.xyzz * normal_10.yzzx);
            x1_14.x = dot (unity_SHBr, tmpvar_15);
            x1_14.y = dot (unity_SHBg, tmpvar_15);
            x1_14.z = dot (unity_SHBb, tmpvar_15);
            res_12 = (x_13 + (x1_14 + (unity_SHC.xyz * 
              ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
            )));
            mediump vec3 tmpvar_16;
            tmpvar_16 = max (((1.055 * 
              pow (max (res_12, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
            ) - 0.055), vec3(0.0, 0.0, 0.0));
            res_12 = tmpvar_16;
            gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
            xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
            xlv_TEXCOORD1 = tmpvar_9;
            xlv_TEXCOORD2 = (unity_ObjectToWorld * pos_5).xyz;
            xlv_TEXCOORD3 = tmpvar_1;
            xlv_TEXCOORD4 = tmpvar_2;
            xlv_TEXCOORD5 = max (vec3(0.0, 0.0, 0.0), tmpvar_16);
          }
          
          
          #endif
          #ifdef FRAGMENT
          #extension GL_EXT_draw_buffers : enable
          uniform highp float _EnableExternalAlpha;
          uniform sampler2D _MainTex;
          uniform sampler2D _AlphaTex;
          varying highp vec2 xlv_TEXCOORD0;
          varying highp vec3 xlv_TEXCOORD1;
          varying mediump vec4 xlv_TEXCOORD3;
          varying mediump vec3 xlv_TEXCOORD5;
          void main ()
          {
            lowp vec3 tmpvar_1;
            lowp vec4 tmpvar_2;
            tmpvar_2 = xlv_TEXCOORD3;
            tmpvar_1 = xlv_TEXCOORD1;
            lowp vec3 tmpvar_3;
            lowp vec4 color_4;
            lowp vec4 tmpvar_5;
            tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
            color_4.xyz = tmpvar_5.xyz;
            lowp vec4 tmpvar_6;
            tmpvar_6 = texture2D (_AlphaTex, xlv_TEXCOORD0);
            highp float tmpvar_7;
            tmpvar_7 = mix (tmpvar_5.w, tmpvar_6.x, _EnableExternalAlpha);
            color_4.w = tmpvar_7;
            lowp vec4 tmpvar_8;
            tmpvar_8 = (color_4 * tmpvar_2);
            tmpvar_3 = (tmpvar_8.xyz * tmpvar_8.w);
            mediump vec4 emission_9;
            mediump vec3 tmpvar_10;
            highp vec3 tmpvar_11;
            tmpvar_10 = tmpvar_3;
            tmpvar_11 = tmpvar_1;
            mediump vec4 outGBuffer2_12;
            mediump vec4 tmpvar_13;
            tmpvar_13.xyz = tmpvar_10;
            tmpvar_13.w = 1.0;
            mediump vec4 tmpvar_14;
            tmpvar_14.xyz = vec3(0.0, 0.0, 0.0);
            tmpvar_14.w = 0.0;
            highp vec4 tmpvar_15;
            tmpvar_15.w = 1.0;
            tmpvar_15.xyz = ((tmpvar_11 * 0.5) + 0.5);
            outGBuffer2_12 = tmpvar_15;
            lowp vec4 tmpvar_16;
            tmpvar_16.w = 1.0;
            tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
            emission_9 = tmpvar_16;
            emission_9.xyz = (emission_9.xyz + (tmpvar_3 * xlv_TEXCOORD5));
            gl_FragData[0] = tmpvar_13;
            gl_FragData[1] = tmpvar_14;
            gl_FragData[2] = outGBuffer2_12;
            gl_FragData[3] = emission_9;
          }
          
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          #ifdef VERTEX
          #version 300 es
          
          uniform 	vec4 _ScreenParams;
          uniform 	mediump vec4 unity_SHAr;
          uniform 	mediump vec4 unity_SHAg;
          uniform 	mediump vec4 unity_SHAb;
          uniform 	mediump vec4 unity_SHBr;
          uniform 	mediump vec4 unity_SHBg;
          uniform 	mediump vec4 unity_SHBb;
          uniform 	mediump vec4 unity_SHC;
          uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
          uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
          uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
          uniform 	mediump vec4 _RendererColor;
          uniform 	mediump vec2 _Flip;
          uniform 	mediump vec4 _Color;
          uniform 	vec4 _MainTex_ST;
          in highp vec4 in_POSITION0;
          in highp vec3 in_NORMAL0;
          in highp vec4 in_TEXCOORD0;
          in mediump vec4 in_COLOR0;
          out highp vec2 vs_TEXCOORD0;
          out highp vec3 vs_TEXCOORD1;
          out highp vec3 vs_TEXCOORD2;
          out mediump vec4 vs_TEXCOORD3;
          out highp vec4 vs_TEXCOORD4;
          out mediump vec3 vs_TEXCOORD5;
          vec4 u_xlat0;
          vec4 u_xlat1;
          mediump vec4 u_xlat16_1;
          mediump vec3 u_xlat16_2;
          mediump vec3 u_xlat16_3;
          vec2 u_xlat8;
          float u_xlat12;
          void main()
          {
              u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
              u_xlat8.xy = _ScreenParams.xy * vec2(0.5, 0.5);
              u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
              u_xlat0.xy = roundEven(u_xlat0.xy);
              u_xlat0.xy = u_xlat0.xy / u_xlat8.xy;
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
              u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
              u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
              u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
              gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
              vs_TEXCOORD2.xyz = u_xlat0.xyz;
              vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
              u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
              u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
              u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
              u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
              u_xlat12 = inversesqrt(u_xlat12);
              u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
              vs_TEXCOORD1.xyz = u_xlat0.xyz;
              u_xlat16_1 = in_COLOR0 * _Color;
              vs_TEXCOORD3 = u_xlat16_1 * _RendererColor;
              vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
              u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
              u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
              u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
              u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
              u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
              u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
              u_xlat0.w = 1.0;
              u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
              u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
              u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
              u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
              u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
              u_xlat0.xyz = log2(u_xlat16_2.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
              u_xlat0.xyz = exp2(u_xlat0.xyz);
              u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
              u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
              vs_TEXCOORD5.xyz = u_xlat0.xyz;
              return;
          }
          
          #endif
          #ifdef FRAGMENT
          #version 300 es
          
          precision highp int;
          uniform 	float _EnableExternalAlpha;
          uniform lowp sampler2D _MainTex;
          uniform lowp sampler2D _AlphaTex;
          in highp vec2 vs_TEXCOORD0;
          in highp vec3 vs_TEXCOORD1;
          in mediump vec4 vs_TEXCOORD3;
          in mediump vec3 vs_TEXCOORD5;
          layout(location = 0) out mediump vec4 SV_Target0;
          layout(location = 1) out mediump vec4 SV_Target1;
          layout(location = 2) out mediump vec4 SV_Target2;
          layout(location = 3) out mediump vec4 SV_Target3;
          vec4 u_xlat0;
          mediump vec4 u_xlat16_0;
          lowp float u_xlat10_0;
          vec4 u_xlat1;
          mediump vec3 u_xlat16_2;
          void main()
          {
              u_xlat10_0 = texture(_AlphaTex, vs_TEXCOORD0.xy).x;
              u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
              u_xlat0.x = u_xlat10_0 + (-u_xlat1.w);
              u_xlat1.w = _EnableExternalAlpha * u_xlat0.x + u_xlat1.w;
              u_xlat16_0 = u_xlat1 * vs_TEXCOORD3;
              u_xlat16_2.xyz = u_xlat16_0.www * u_xlat16_0.xyz;
              SV_Target0.xyz = u_xlat16_2.xyz;
              SV_Target3.xyz = u_xlat16_2.xyz * vs_TEXCOORD5.xyz;
              SV_Target0.w = 1.0;
              SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
              u_xlat0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
              u_xlat0.w = 1.0;
              SV_Target2 = u_xlat0;
              SV_Target3.w = 1.0;
              return;
          }
          
          #endif
          
          "
        }
      }
      Program "fp"
      {
        SubProgram "gles hw_tier00"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES
          
          
          "
        }
        SubProgram "gles3 hw_tier00"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier01"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
        SubProgram "gles3 hw_tier02"
        {
           Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" "ETC1_EXTERNAL_ALPHA" "PIXELSNAP_ON" }
          
          "!!!!GLES3
          
          
          "
        }
      }
      
    } // end phase
  }
  FallBack "Transparent/VertexLit"
}
